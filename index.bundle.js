!function(t){var e={};function F(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,F),o.l=!0,o.exports}F.m=t,F.c=e,F.d=function(t,e,n){F.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},F.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},F.t=function(t,e){if(1&e&&(t=F(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(F.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)F.d(n,o,function(e){return t[e]}.bind(null,o));return n},F.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return F.d(e,"a",e),e},F.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},F.p="",F(F.s=0)}([function(t,e,F){"use strict";F.r(e);function n(){}const o=t=>t;function r(t,e){for(const F in e)t[F]=e[F];return t}function a(t){return t()}function i(){return Object.create(null)}function l(t){t.forEach(a)}function s(t){return"function"==typeof t}function c(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}let u;function f(t,e){return u||(u=document.createElement("a")),u.href=e,t===u.href}function d(t){return 0===Object.keys(t).length}function v(t,...e){if(null==t)return n;const F=t.subscribe(...e);return F.unsubscribe?()=>F.unsubscribe():F}const p="undefined"!=typeof window;let m=p?()=>window.performance.now():()=>Date.now(),H=p?t=>requestAnimationFrame(t):n;const g=new Set;function h(t){g.forEach(e=>{e.c(t)||(g.delete(e),e.f())}),0!==g.size&&H(h)}function y(t){let e;return 0===g.size&&H(h),{promise:new Promise(F=>{g.add(e={c:t,f:F})}),abort(){g.delete(e)}}}let x=!1;function b(t,e){t.appendChild(e)}function _(t,e,F){const n=$(t);if(!n.getElementById(e)){const t=S("style");t.id=e,t.textContent=F,w(n,t)}}function $(t){if(!t)return document;const e=t.getRootNode?t.getRootNode():t.ownerDocument;return e&&e.host?e:t.ownerDocument}function w(t,e){b(t.head||t,e)}function k(t,e,F){t.insertBefore(e,F||null)}function C(t){t.parentNode.removeChild(t)}function S(t){return document.createElement(t)}function z(t){return document.createTextNode(t)}function E(){return z(" ")}function T(t,e,F,n){return t.addEventListener(e,F,n),()=>t.removeEventListener(e,F,n)}function O(t,e,F){null==F?t.removeAttribute(e):t.getAttribute(e)!==F&&t.setAttribute(e,F)}function A(t,e){e=""+e,t.wholeText!==e&&(t.data=e)}function j(t,e,F,n){null===F?t.style.removeProperty(e):t.style.setProperty(e,F,n?"important":"")}function D(t,e){for(let F=0;F<t.options.length;F+=1){const n=t.options[F];if(n.__value===e)return void(n.selected=!0)}t.selectedIndex=-1}function P(t){const e=t.querySelector(":checked")||t.options[0];return e&&e.__value}function M(t,e,F){t.classList[F?"add":"remove"](e)}new Map;let R;function L(t){R=t}function q(){if(!R)throw new Error("Function called outside component initialization");return R}function B(t){q().$$.on_mount.push(t)}const G=[],I=[],Y=[],N=[],X=Promise.resolve();let J=!1;function K(){J||(J=!0,X.then(W))}function Q(t){Y.push(t)}const U=new Set;let V=0;function W(){const t=R;do{for(;V<G.length;){const t=G[V];V++,L(t),Z(t.$$)}for(L(null),G.length=0,V=0;I.length;)I.pop()();for(let t=0;t<Y.length;t+=1){const e=Y[t];U.has(e)||(U.add(e),e())}Y.length=0}while(G.length);for(;N.length;)N.pop()();J=!1,U.clear(),L(t)}function Z(t){if(null!==t.fragment){t.update(),l(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(Q)}}const tt=new Set;let et;function Ft(){et={r:0,c:[],p:et}}function nt(){et.r||l(et.c),et=et.p}function ot(t,e){t&&t.i&&(tt.delete(t),t.i(e))}function rt(t,e,F,n){if(t&&t.o){if(tt.has(t))return;tt.add(t),et.c.push(()=>{tt.delete(t),n&&(F&&t.d(1),n())}),t.o(e)}else n&&n()}"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let at;function it(t,e,F,n){const{fragment:o,on_mount:r,on_destroy:i,after_update:c}=t.$$;o&&o.m(e,F),n||Q(()=>{const e=r.map(a).filter(s);i?i.push(...e):l(e),t.$$.on_mount=[]}),c.forEach(Q)}function lt(t,e){const F=t.$$;null!==F.fragment&&(l(F.on_destroy),F.fragment&&F.fragment.d(e),F.on_destroy=F.fragment=null,F.ctx=[])}function st(t,e,F,o,r,a,s,c=[-1]){const u=R;L(t);const f=t.$$={fragment:null,ctx:null,props:a,update:n,not_equal:r,bound:i(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(u?u.$$.context:[])),callbacks:i(),dirty:c,skip_bound:!1,root:e.target||u.$$.root};s&&s(f.root);let d=!1;if(f.ctx=F?F(t,e.props||{},(e,F,...n)=>{const o=n.length?n[0]:F;return f.ctx&&r(f.ctx[e],f.ctx[e]=o)&&(!f.skip_bound&&f.bound[e]&&f.bound[e](o),d&&function(t,e){-1===t.$$.dirty[0]&&(G.push(t),K(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}(t,e)),F}):[],f.update(),d=!0,l(f.before_update),f.fragment=!!o&&o(f.ctx),e.target){if(e.hydrate){x=!0;const t=(v=e.target,Array.from(v.childNodes));f.fragment&&f.fragment.l(t),t.forEach(C)}else f.fragment&&f.fragment.c();e.intro&&ot(t.$$.fragment),it(t,e.target,e.anchor,e.customElement),x=!1,W()}var v;L(u)}"function"==typeof HTMLElement&&(at=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:t}=this.$$;this.$$.on_disconnect=t.map(a).filter(s);for(const t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(t,e,F){this[t]=F}disconnectedCallback(){l(this.$$.on_disconnect)}$destroy(){lt(this,1),this.$destroy=n}$on(t,e){const F=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return F.push(e),()=>{const t=F.indexOf(e);-1!==t&&F.splice(t,1)}}$set(t){this.$$set&&!d(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}});class ct{$destroy(){lt(this,1),this.$destroy=n}$on(t,e){const F=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return F.push(e),()=>{const t=F.indexOf(e);-1!==t&&F.splice(t,1)}}$set(t){this.$$set&&!d(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}function ut(t){let e,F,o,r,a,i,l,s,c,u,d,v=t[0]+1+"";return{c(){e=S("img"),o=E(),r=S("div"),a=S("p"),i=z("Trajectory after curriculum step "),l=z(v),s=E(),c=S("input"),f(e.src,F="images/trajectories"+t[0]+".svg")||O(e,"src",F),O(e,"alt","TODO"),O(e,"height","300px"),O(e,"width","300px"),O(c,"type","range"),O(c,"min","0"),O(c,"max",ft),c.value="0",j(r,"width","300px"),j(r,"margin","auto"),j(r,"text-align","center")},m(F,n){k(F,e,n),k(F,o,n),k(F,r,n),b(r,a),b(a,i),b(a,l),b(r,s),b(r,c),u||(d=T(c,"input",t[1]),u=!0)},p(t,[n]){1&n&&!f(e.src,F="images/trajectories"+t[0]+".svg")&&O(e,"src",F),1&n&&v!==(v=t[0]+1+"")&&A(l,v)},i:n,o:n,d(t){t&&C(e),t&&C(o),t&&C(r),u=!1,d()}}}const ft=5;function dt(t,e,F){let n=0;return[n,function(t){console.log(t.target.value),F(0,n=parseInt(t.target.value))}]}var vt=class extends ct{constructor(t){super(),st(this,t,dt,ut,c,{})}};function pt(t){let e,F,o,r,a,i,l,s,c,u,d,v;return{c(){e=S("div"),F=S("img"),r=E(),a=S("div"),i=S("p"),l=z("x = "),s=z(t[0]),c=E(),u=S("input"),f(F.src,o="images/16x16_back"+t[0]+"_successes.svg")||O(F,"src",o),O(F,"alt","TODO"),O(F,"height","300px"),O(F,"width","400px"),O(u,"type","range"),O(u,"min","1"),O(u,"max",mt),u.value="0",j(a,"width","300px"),j(a,"margin","auto"),j(a,"text-align","center"),j(e,"display","flex"),j(e,"flex-direction","column"),j(e,"align-items","center")},m(n,o){k(n,e,o),b(e,F),b(e,r),b(e,a),b(a,i),b(i,l),b(i,s),b(a,c),b(a,u),d||(v=T(u,"input",t[1]),d=!0)},p(t,[e]){1&e&&!f(F.src,o="images/16x16_back"+t[0]+"_successes.svg")&&O(F,"src",o),1&e&&A(s,t[0])},i:n,o:n,d(t){t&&C(e),d=!1,v()}}}const mt=9;function Ht(t,e,F){let n=1;return[n,function(t){console.log(t.target.value),F(0,n=parseInt(t.target.value))}]}var gt=class extends ct{constructor(t){super(),st(this,t,Ht,pt,c,{})}};function ht(t){let e,F,o,r,a,i,l,s,c,u,d,v;return{c(){e=S("div"),F=S("img"),r=E(),a=S("div"),i=S("p"),l=z("x = "),s=z(t[0]),c=E(),u=S("input"),f(F.src,o="images/16x16_incremental"+t[0]+"_successes.svg")||O(F,"src",o),O(F,"alt","TODO"),O(F,"height","300px"),O(F,"width","400px"),O(u,"type","range"),O(u,"min","0"),O(u,"max",yt),u.value="0",j(a,"width","300px"),j(a,"margin","auto"),j(a,"text-align","center"),j(e,"display","flex"),j(e,"flex-direction","column"),j(e,"align-items","center")},m(n,o){k(n,e,o),b(e,F),b(e,r),b(e,a),b(a,i),b(i,l),b(i,s),b(a,c),b(a,u),d||(v=T(u,"input",t[1]),d=!0)},p(t,[e]){1&e&&!f(F.src,o="images/16x16_incremental"+t[0]+"_successes.svg")&&O(F,"src",o),1&e&&A(s,t[0])},i:n,o:n,d(t){t&&C(e),d=!1,v()}}}const yt=4;function xt(t,e,F){let n=0;return[n,function(t){console.log(t.target.value),F(0,n=parseInt(t.target.value))}]}var bt=class extends ct{constructor(t){super(),st(this,t,xt,ht,c,{})}};const _t=[];function $t(t,e=n){let F;const o=new Set;function r(e){if(c(t,e)&&(t=e,F)){const e=!_t.length;for(const e of o)e[1](),_t.push(e,t);if(e){for(let t=0;t<_t.length;t+=2)_t[t][0](_t[t+1]);_t.length=0}}}return{set:r,update:function(e){r(e(t))},subscribe:function(a,i=n){const l=[a,i];return o.add(l),1===o.size&&(F=e(r)||n),a(t),()=>{o.delete(l),0===o.size&&(F(),F=null)}}}}function wt(t){const e=t-1;return e*e*e+1}function kt(t){return"[object Date]"===Object.prototype.toString.call(t)}function Ct(t,e){if(t===e||t!=t)return()=>t;const F=typeof t;if(F!==typeof e||Array.isArray(t)!==Array.isArray(e))throw new Error("Cannot interpolate values of different type");if(Array.isArray(t)){const F=e.map((e,F)=>Ct(t[F],e));return t=>F.map(e=>e(t))}if("object"===F){if(!t||!e)throw new Error("Object cannot be null");if(kt(t)&&kt(e)){t=t.getTime();const F=(e=e.getTime())-t;return e=>new Date(t+e*F)}const F=Object.keys(e),n={};return F.forEach(F=>{n[F]=Ct(t[F],e[F])}),t=>{const e={};return F.forEach(F=>{e[F]=n[F](t)}),e}}if("number"===F){const F=e-t;return e=>t+e*F}throw new Error(`Cannot interpolate ${F} values`)}function St(t){_(t,"svelte-io58ff",".confetti-holder.svelte-io58ff.svelte-io58ff{position:relative}@keyframes svelte-io58ff-rotate{0%{transform:skew(var(--skew)) rotate3d(var(--full-rotation))}100%{transform:skew(var(--skew)) rotate3d(var(--rotation-xyz), calc(var(--rotation-deg) + 360deg))}}@keyframes svelte-io58ff-translate{0%{opacity:1}8%{transform:translateY(calc(var(--translate-y) * 0.95)) translateX(calc(var(--translate-x) * (var(--x-spread) * 0.9)));opacity:1}12%{transform:translateY(var(--translate-y)) translateX(calc(var(--translate-x) * (var(--x-spread) * 0.95)));opacity:1}16%{transform:translateY(var(--translate-y)) translateX(calc(var(--translate-x) * var(--x-spread)));opacity:1}100%{transform:translateY(calc(var(--translate-y) + var(--fall-distance))) translateX(var(--translate-x));opacity:0}}@keyframes svelte-io58ff-no-gravity-translate{0%{opacity:1}100%{transform:translateY(var(--translate-y)) translateX(var(--translate-x));opacity:0}}.confetti.svelte-io58ff.svelte-io58ff{--translate-y:calc(-200px * var(--translate-y-multiplier));--translate-x:calc(200px * var(--translate-x-multiplier));position:absolute;height:calc(var(--size) * var(--scale));width:calc(var(--size) * var(--scale));animation:svelte-io58ff-translate var(--transition-duration) var(--transition-delay) var(--transition-iteration-count) linear;opacity:0;pointer-events:none}.confetti.svelte-io58ff.svelte-io58ff::before{--full-rotation:var(--rotation-xyz), var(--rotation-deg);content:'';display:block;width:100%;height:100%;background:var(--color);background-size:contain;transform:skew(var(--skew)) rotate3d(var(--full-rotation));animation:svelte-io58ff-rotate var(--transition-duration) var(--transition-delay) var(--transition-iteration-count) linear}.rounded.svelte-io58ff .confetti.svelte-io58ff::before{border-radius:50%}.cone.svelte-io58ff .confetti.svelte-io58ff{--translate-x:calc(200px * var(--translate-y-multiplier) * var(--translate-x-multiplier))}.no-gravity.svelte-io58ff .confetti.svelte-io58ff{animation-name:svelte-io58ff-no-gravity-translate;animation-timing-function:ease-out}@media(prefers-reduced-motion){.confetti.svelte-io58ff.svelte-io58ff,.confetti.svelte-io58ff.svelte-io58ff::before{animation:none}}")}function zt(t,e,F){const n=t.slice();return n[18]=e[F],n}function Et(t){let e,F={length:t[6]},n=[];for(let e=0;e<F.length;e+=1)n[e]=Tt(zt(t,F,e));return{c(){e=S("div");for(let t=0;t<n.length;t+=1)n[t].c();O(e,"class","confetti-holder svelte-io58ff"),M(e,"rounded",t[9]),M(e,"cone",t[10]),M(e,"no-gravity",t[11])},m(t,F){k(t,e,F);for(let t=0;t<n.length;t+=1)n[t].m(e,null)},p(t,o){if(20991&o){let r;for(F={length:t[6]},r=0;r<F.length;r+=1){const a=zt(t,F,r);n[r]?n[r].p(a,o):(n[r]=Tt(a),n[r].c(),n[r].m(e,null))}for(;r<n.length;r+=1)n[r].d(1);n.length=F.length}512&o&&M(e,"rounded",t[9]),1024&o&&M(e,"cone",t[10]),2048&o&&M(e,"no-gravity",t[11])},d(t){t&&C(e),function(t,e){for(let F=0;F<t.length;F+=1)t[F]&&t[F].d(e)}(n,t)}}}function Tt(t){let e;return{c(){e=S("div"),O(e,"class","confetti svelte-io58ff"),j(e,"--fall-distance",t[8]),j(e,"--size",t[0]+"px"),j(e,"--color",t[14]()),j(e,"--skew",At(-45,45)+"deg,"+At(-45,45)+"deg"),j(e,"--rotation-xyz",At(-10,10)+", "+At(-10,10)+", "+At(-10,10)),j(e,"--rotation-deg",At(0,360)+"deg"),j(e,"--translate-y-multiplier",At(t[2][0],t[2][1])),j(e,"--translate-x-multiplier",At(t[1][0],t[1][1])),j(e,"--scale",.1*At(2,10)),j(e,"--transition-duration",t[4]?`calc(${t[3]}ms * var(--scale))`:t[3]+"ms"),j(e,"--transition-delay",At(t[5][0],t[5][1])+"ms"),j(e,"--transition-iteration-count",t[4]?"infinite":t[7]),j(e,"--x-spread",1-t[12])},m(t,F){k(t,e,F)},p(t,F){256&F&&j(e,"--fall-distance",t[8]),1&F&&j(e,"--size",t[0]+"px"),4&F&&j(e,"--translate-y-multiplier",At(t[2][0],t[2][1])),2&F&&j(e,"--translate-x-multiplier",At(t[1][0],t[1][1])),24&F&&j(e,"--transition-duration",t[4]?`calc(${t[3]}ms * var(--scale))`:t[3]+"ms"),32&F&&j(e,"--transition-delay",At(t[5][0],t[5][1])+"ms"),144&F&&j(e,"--transition-iteration-count",t[4]?"infinite":t[7]),4096&F&&j(e,"--x-spread",1-t[12])},d(t){t&&C(e)}}}function Ot(t){let e,F=!t[13]&&Et(t);return{c(){F&&F.c(),e=z("")},m(t,n){F&&F.m(t,n),k(t,e,n)},p(t,[n]){t[13]?F&&(F.d(1),F=null):F?F.p(t,n):(F=Et(t),F.c(),F.m(e.parentNode,e))},i:n,o:n,d(t){F&&F.d(t),t&&C(e)}}}function At(t,e){return Math.random()*(e-t)+t}function jt(t,e,F){let{size:n=10}=e,{x:o=[-.5,.5]}=e,{y:r=[.25,1]}=e,{duration:a=2e3}=e,{infinite:i=!1}=e,{delay:l=[0,50]}=e,{colorRange:s=[0,360]}=e,{colorArray:c=[]}=e,{amount:u=50}=e,{iterationCount:f=1}=e,{fallDistance:d="100px"}=e,{rounded:v=!1}=e,{cone:p=!1}=e,{noGravity:m=!1}=e,{xSpread:H=.15}=e,{destroyOnComplete:g=!0}=e,h=!1;return B(()=>{g&&!i&&"infinite"!=f&&setTimeout(()=>F(13,h=!0),(a+l[1])*f)}),t.$$set=t=>{"size"in t&&F(0,n=t.size),"x"in t&&F(1,o=t.x),"y"in t&&F(2,r=t.y),"duration"in t&&F(3,a=t.duration),"infinite"in t&&F(4,i=t.infinite),"delay"in t&&F(5,l=t.delay),"colorRange"in t&&F(15,s=t.colorRange),"colorArray"in t&&F(16,c=t.colorArray),"amount"in t&&F(6,u=t.amount),"iterationCount"in t&&F(7,f=t.iterationCount),"fallDistance"in t&&F(8,d=t.fallDistance),"rounded"in t&&F(9,v=t.rounded),"cone"in t&&F(10,p=t.cone),"noGravity"in t&&F(11,m=t.noGravity),"xSpread"in t&&F(12,H=t.xSpread),"destroyOnComplete"in t&&F(17,g=t.destroyOnComplete)},[n,o,r,a,i,l,u,f,d,v,p,m,H,h,function(){return c.length?c[Math.round(Math.random()*(c.length-1))]:`hsl(${Math.round(At(s[0],s[1]))}, 75%, 50%`},s,c,g]}var Dt=class extends ct{constructor(t){super(),st(this,t,jt,Ot,c,{size:0,x:1,y:2,duration:3,infinite:4,delay:5,colorRange:15,colorArray:16,amount:6,iterationCount:7,fallDistance:8,rounded:9,cone:10,noGravity:11,xSpread:12,destroyOnComplete:17},St)}};const Pt={small:["SFFFFFFFFF","FFFFFFFFFF","HFFFFFFFFF","FFHFFFFFFF","HFFFFHFFFF","FFHFFFHFFF","HFFFFHFFFF","FFHFFFFFFF","HFFFFFFFFF","FFFGFFFFFF"],"16x16":["HHFFFFFFFFFFFFHH","HFFFFFFFFFFFFFFH","FFFFFFFFFFFFFFFF","FFFHHHFFFFHHHFFF","FFFHHHFFFFHHHFFF","FFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFF","FFFFFFFFGFFFFFFF","FFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFF","FFFHHHFFFFHHHFFF","FFFHHHHHHHHHHFFF","FFFFHHHHHHHHFFFF","FFFFFFFFFFFFFFFF","HFFFFFFFSFFFFFFH","HHFFFFFFFFFFFFHH"],"32x32":["HHHHHHFFFFFFFFFFFFFFFFFHHHHHHHHH","HHFFFFFFFFFFFFFFFFFFFFFFHHHHHHHH","FFFFSFFFHHFFFFFFFFFFFFFFFFFFFFFH","FFFFFFFFFHFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HHFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HHHHHFFFFFFFFFHHHHHHHHFFFFFFFFFF","HHHHHHHHHHHHHHHHHHHHHHHFFFFFFFFF","HHHHHHHHHHHHHHHHHHHHHHFFFFFFFFFF","HHFFHHHHHHHHHHHHFFFFFFFFFFFFFFFF","HFFFFFFFFFFFFHHHHHFFFFFFFFFFFFFF","HFFFFFFFFFFFFFFHHFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHHHFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHHHFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFHHHHFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFHHHHHF","FFFFFFFFFFFFFFFFFFFFFFFFFFFHHHHH","FFFFFFFFFFFFFFFFFFFFFFFFFFHHHHHH","FFFFFFFFFFFFFFFFFFFFFFFFFHHHHFFH","FFFFFFFFFFFFFFFFFFFFFFFFFFHHFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFGFFFFFFFHFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFHFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHFFHFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HFFFFFFFFFFFFFFFFFFFFFFHFFFFFFFF","HHHHHHHFFFFFFFFFFFFFFFFFFFFFFFFF","HHHHHHHHHHHHFFFFFFFFFFFFFFFFFFFF"]},Mt={H:"#1976d2",S:"#ef9a9a",F:"#e1f5fe",G:"#81c784",T:"#ffe0b2"};function Rt(t){_(t,"svelte-1v9t4v1","canvas.svelte-1v9t4v1.svelte-1v9t4v1{padding:1em\n  }.game.svelte-1v9t4v1.svelte-1v9t4v1{display:flex;flex-direction:column;align-items:center;justify-content:center}.controls.svelte-1v9t4v1.svelte-1v9t4v1{display:flex;flex-direction:column;align-items:center}.status.svelte-1v9t4v1.svelte-1v9t4v1{height:1em;width:16em;text-align:center;transition:color 1s;padding-top:1em}.map.svelte-1v9t4v1.svelte-1v9t4v1{display:flex;flex-direction:column;align-items:center}.menu.svelte-1v9t4v1.svelte-1v9t4v1{display:flex;flex-direction:row;align-items:center}.key.svelte-1v9t4v1.svelte-1v9t4v1{background-color:#eee;border-radius:4px;font-size:1em;padding:0.5em 0.5em;border-top:5px solid rgba(255, 255, 255, 0.5);border-left:5px solid rgba(255, 255, 255, 0.5);border-right:5px solid rgba(0, 0, 0, 0.2);border-bottom:5px solid rgba(0, 0, 0, 0.2);color:#555;text-align:center;width:4em;height:4em;cursor:pointer}@media(min-width: 768px){.game.svelte-1v9t4v1.svelte-1v9t4v1{flex-direction:row}.controls.svelte-1v9t4v1.svelte-1v9t4v1{flex-direction:column}.menu.svelte-1v9t4v1.svelte-1v9t4v1{flex-direction:column}.key.svelte-1v9t4v1.svelte-1v9t4v1{width:3em;height:3em}}.menu.svelte-1v9t4v1 select.svelte-1v9t4v1{margin:0.5em}.keyboard.svelte-1v9t4v1.svelte-1v9t4v1{display:grid;grid-template-columns:auto auto auto;grid-gap:0.5em;padding:1em}.key.svelte-1v9t4v1.svelte-1v9t4v1:active{background-color:#ddd}")}function Lt(t){let e,F;return e=new Dt({props:{cone:!0,delay:[0,200],amount:"50",x:[-.7,.7],y:[.5,1.5]}}),{c(){var t;(t=e.$$.fragment)&&t.c()},m(t,n){it(e,t,n),F=!0},i(t){F||(ot(e.$$.fragment,t),F=!0)},o(t){rt(e.$$.fragment,t),F=!1},d(t){lt(e,t)}}}function qt(t){let e;return{c(){e=S("p"),e.textContent="Press the arrow keys to move...",O(e,"class","status svelte-1v9t4v1")},m(t,F){k(t,e,F)},p:n,d(t){t&&C(e)}}}function Bt(t){let e,F;return{c(){e=S("p"),F=z(t[10]),O(e,"class","status svelte-1v9t4v1"),j(e,"transition","color "+(t[10]?2:0)+"s"),j(e,"transition-timing-function","ease-in"),j(e,"color",t[10]?"white":"black")},m(t,n){k(t,e,n),b(e,F)},p(t,n){1024&n&&A(F,t[10]),1024&n&&j(e,"transition","color "+(t[10]?2:0)+"s"),1024&n&&j(e,"color",t[10]?"white":"black")},d(t){t&&C(e)}}}function Gt(t){let e,F,n,o,r,a,i,s,c,u,d,v,p,m,H,g,h,y,x,_,$,w,z,A,j,P,M,R,L,q,B,G,I,Y,N,X,J,K,U,V,W,Z,tt,et=t[11]&&Lt();function at(t,e){return t[9]?Bt:qt}let it=at(t),lt=it(t);return{c(){e=S("div"),F=S("div"),n=S("canvas"),a=E(),i=S("img"),c=E(),et&&et.c(),u=E(),d=S("div"),lt.c(),v=E(),p=S("div"),m=S("select"),H=S("option"),H.textContent="Frozen Lake",g=S("option"),g.textContent="Frozen Smiley",h=S("option"),h.textContent="Large Lake",y=E(),x=S("select"),_=S("option"),_.textContent="No Teacher",$=S("option"),$.textContent="Distance 1",w=S("option"),w.textContent="Distance 2",z=E(),A=S("select"),j=S("option"),j.textContent="Soft Reset",P=S("option"),P.textContent="Back 4",M=S("option"),M.textContent="Hard Reset",R=E(),L=S("div"),q=S("div"),B=E(),G=S("button"),G.textContent="↑",I=E(),Y=S("div"),N=E(),X=S("button"),X.textContent="←",J=E(),K=S("button"),K.textContent="↓",U=E(),V=S("button"),V.textContent="→",O(n,"width",o=300),O(n,"height",r=300),O(n,"class","svelte-1v9t4v1"),O(i,"width","300"),O(i,"alt","TODO"),f(i.src,s="./images/map_legend.svg")||O(i,"src","./images/map_legend.svg"),O(F,"class","map svelte-1v9t4v1"),H.__value="small",H.value=H.__value,g.__value="16x16",g.value=g.__value,h.__value="32x32",h.value=h.__value,O(m,"name","map"),O(m,"id","map"),O(m,"class","svelte-1v9t4v1"),void 0===t[1]&&Q(()=>t[17].call(m)),_.__value="0",_.value=_.__value,$.__value="1",$.value=$.__value,w.__value="2",w.value=w.__value,O(x,"name","teacher"),O(x,"id","teacher"),O(x,"class","svelte-1v9t4v1"),void 0===t[2]&&Q(()=>t[18].call(x)),j.__value="SR",j.value=j.__value,P.__value="B4",P.value=P.__value,M.__value="HR",M.value=M.__value,O(A,"name","reset"),O(A,"id","reset"),O(A,"class","svelte-1v9t4v1"),void 0===t[3]&&Q(()=>t[19].call(A)),O(p,"class","menu svelte-1v9t4v1"),O(G,"class","key svelte-1v9t4v1"),O(X,"class","key svelte-1v9t4v1"),O(K,"class","key svelte-1v9t4v1"),O(V,"class","key svelte-1v9t4v1"),O(L,"class","keyboard svelte-1v9t4v1"),O(d,"class","controls svelte-1v9t4v1"),O(e,"class","game svelte-1v9t4v1")},m(o,r){k(o,e,r),b(e,F),b(F,n),t[15](n),b(F,a),b(F,i),b(F,c),et&&et.m(F,null),b(e,u),b(e,d),lt.m(d,null),b(d,v),b(d,p),b(p,m),b(m,H),b(m,g),b(m,h),D(m,t[1]),b(p,y),b(p,x),b(x,_),b(x,$),b(x,w),D(x,t[2]),b(p,z),b(p,A),b(A,j),b(A,P),b(A,M),D(A,t[3]),b(d,R),b(d,L),b(L,q),b(L,B),b(L,G),b(L,I),b(L,Y),b(L,N),b(L,X),b(L,J),b(L,K),b(L,U),b(L,V),W=!0,Z||(tt=[T(window,"keydown",t[13]),T(n,"click",t[16]),T(m,"change",t[17]),T(m,"change",t[12]),T(x,"change",t[18]),T(A,"change",t[19]),T(G,"click",t[20]),T(X,"click",t[21]),T(K,"click",t[22]),T(V,"click",t[23])],Z=!0)},p(t,[e]){t[11]?et?2048&e&&ot(et,1):(et=Lt(),et.c(),ot(et,1),et.m(F,null)):et&&(Ft(),rt(et,1,1,()=>{et=null}),nt()),it===(it=at(t))&&lt?lt.p(t,e):(lt.d(1),lt=it(t),lt&&(lt.c(),lt.m(d,v))),2&e&&D(m,t[1]),4&e&&D(x,t[2]),8&e&&D(A,t[3])},i(t){W||(ot(et),W=!0)},o(t){rt(et),W=!1},d(F){F&&C(e),t[15](null),et&&et.d(),lt.d(),Z=!1,l(tt)}}}function It(t,e,F){let a,i,l,s,c,u=n;t.$$.on_destroy.push(()=>u());var f,d,p=!1,H=!1,g=!1,h=!1,x=!0,b=[],_=!1,$="",w=null,k=!1;function C(t){F(10,$=""),clearTimeout(w),setTimeout(()=>{F(10,$=t)},1),w=setTimeout(()=>{F(10,$="")},2e3)}B(()=>{const t=i.getContext("2d");var e,n,$,w,S;function z(t){let e=t.length,F=t[0].length,n=new Array(e).fill(!1).map(()=>new Array(F).fill(!1));for(let r=0;r<e;r++)for(let e=0;e<F;e++){var o=!1;try{o|=t[r][e+1]}catch(t){}try{o|=t[r+1][e]}catch(t){}try{o|=t[r][e-1]}catch(t){}try{o|=t[r-1][e]}catch(t){}n[r][e]=o}return n}function E(){n=Pt[l],e=i.height/n.length,S=function(t,e){if(0==e)return t;var F=new Array;for(let t=0;t<n.length;t++)F.push(n[t].split(""));let o=F.map(t=>t.map(t=>"H"==t)),r=F.map(t=>t.map(t=>"F"==t));var a,i=Array.from(o);for(let t=0;t<e;t++)a=z(i),i=a.map((t,e)=>t.map((t,F)=>t||i[e][F]));var l=Array.from(F);for(let t=0;t<F.length;t++)for(let e=0;e<F[0].length;e++)a[t][e]&&r[t][e]&&(l[t][e]="T");let s=new Array;for(let e=0;e<t.length;e++)s.push(l[e].join(""));return s}(n,s);for(let F=0;F<n.length;F++)for(let o=0;o<n[0].length;o++){let n=S[F][o];"S"==n&&($=[o,F]);let r=o*e,a=F*e;t.beginPath(),t.rect(r,a,e+1,e+1),t.fillStyle=Mt[n],t.fill(),t.closePath()}}function T(t){f.set(t),d=t,b.push(d)}E(),function l(){(H||p||g||h)&&F(9,_=!0),t.clearRect(0,0,i.width,i.height),E(),x&&(F(8,f=function(t,e={}){const F=$t(t);let n,a=t;function i(i,l){if(null==t)return F.set(t=i),Promise.resolve();a=i;let s=n,c=!1,{delay:u=0,duration:f=400,easing:d=o,interpolate:v=Ct}=r(r({},e),l);if(0===f)return s&&(s.abort(),s=null),F.set(t=a),Promise.resolve();const p=m()+u;let H;return n=y(e=>{if(e<p)return!0;c||(H=v(t,i),"function"==typeof f&&(f=f(t,i)),c=!0),s&&(s.abort(),s=null);const n=e-p;return n>f?(F.set(t=i),!1):(F.set(t=H(d(n/f))),!0)}),n.promise}return{set:i,update:(e,F)=>i(e(a,t),F),subscribe:F.subscribe}}($,{duration:100,easing:wt})),u(),u=v(f,t=>F(28,a=t)),d=$,b.push(d)),t.beginPath(),t.rect(a[0]*e,a[1]*e,e,e),t.fillStyle="#9575cd",t.fill(),t.closePath();const s=Math.random();H||p?s<.1?(F(5,H=!1),F(4,p=!1),F(6,g=!0)):s<.2&&(F(5,H=!1),F(4,p=!1),F(7,h=!0)):(g||h)&&(s<.1?(F(6,g=!1),F(7,h=!1),F(5,H=!0)):s<.2&&(F(6,g=!1),F(7,h=!1),F(4,p=!0))),s<.2&&(g||h||H||p)&&C("You just slipped."),w=Array.from(d);let[z,O]=Array.from(w);if(p?z<n[0].length-1&&(z+=1):H?z>0&&(z-=1):g?O>0&&(O-=1):h&&O<n.length-1&&(O+=1),(p||H||h||g)&&T([z,O]),"G"==n[O][z])F(11,k=!0),setTimeout(()=>{F(11,k=!1)},3e3),C("You won!"),b=[],T($);else if("H"==n[O][z])C("You failed."),b=[],T($);else if("T"==S[O][z])if("HR"==c)C("The teacher set you back to the start."),b=[],T($);else if("B4"==c){C("The teacher set you four steps back.");for(let t=0;t<4&&b.length>1;t++)b.pop();T(b[b.length-1])}else"SR"==c&&(C("The teacher set you one step back."),T(w));x=!1,F(4,p=!1),F(5,H=!1),F(6,g=!1),F(7,h=!1),requestAnimationFrame(l)}()});return[i,l,s,c,p,H,g,h,f,_,$,k,function(){x=!0},function(t){39==t.keyCode||"d"==t.key?(F(4,p=!0),t.preventDefault()):37==t.keyCode||"a"==t.key?(F(5,H=!0),t.preventDefault()):38==t.keyCode||"w"==t.key?(F(6,g=!0),t.preventDefault()):40!=t.keyCode&&"s"!=t.key||(F(7,h=!0),t.preventDefault())},C,function(t){I[t?"unshift":"push"](()=>{i=t,F(0,i)})},()=>C("Press the arrow keys to move..."),function(){l=P(this),F(1,l)},function(){s=P(this),F(2,s)},function(){c=P(this),F(3,c)},()=>F(6,g=!0),()=>F(5,H=!0),()=>F(7,h=!0),()=>F(4,p=!0)]}var Yt=class extends ct{constructor(t){super(),st(this,t,It,Gt,c,{},Rt)}},Nt=document.getElementById("trajectories-visualization");Nt.addEventListener("ready",(function(){var t=Nt.querySelector("#trajectories-visualization-target");new vt({target:t})}));var Xt=document.getElementById("back-visualization");Xt.addEventListener("ready",(function(){var t=Xt.querySelector("#back-visualization-target");new gt({target:t})}));var Jt=document.getElementById("incremental-visualization");Jt.addEventListener("ready",(function(){var t=Jt.querySelector("#incremental-visualization-target");new bt({target:t})}));var Kt=document.getElementById("grid-visualization");Kt.addEventListener("ready",(function(){var t=Kt.querySelector("#grid-visualization-target");new Yt({target:t})}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,