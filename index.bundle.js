!function(e){var t={};function F(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,F),r.l=!0,r.exports}F.m=e,F.c=t,F.d=function(e,t,n){F.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},F.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},F.t=function(e,t){if(1&t&&(e=F(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(F.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)F.d(n,r,function(t){return e[t]}.bind(null,r));return n},F.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return F.d(t,"a",t),t},F.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},F.p="",F(F.s=0)}([function(e,t,F){"use strict";F.r(t);function n(){}const r=e=>e;function o(e,t){for(const F in t)e[F]=t[F];return e}function i(e){return e()}function a(){return Object.create(null)}function s(e){e.forEach(i)}function c(e){return"function"==typeof e}function l(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e}let u;function f(e,t){return u||(u=document.createElement("a")),u.href=t,e===u.href}function d(e){return 0===Object.keys(e).length}function p(e,...t){if(null==e)return n;const F=e.subscribe(...t);return F.unsubscribe?()=>F.unsubscribe():F}const m="undefined"!=typeof window;let v=m?()=>window.performance.now():()=>Date.now(),H=m?e=>requestAnimationFrame(e):n;const h=new Set;function g(e){h.forEach(t=>{t.c(e)||(h.delete(t),t.f())}),0!==h.size&&H(g)}function y(e){let t;return 0===h.size&&H(g),{promise:new Promise(F=>{h.add(t={c:e,f:F})}),abort(){h.delete(t)}}}let x=!1;function b(e,t){e.appendChild(t)}function w(e,t,F){const n=_(e);if(!n.getElementById(t)){const e=S("style");e.id=t,e.textContent=F,$(n,e)}}function _(e){if(!e)return document;const t=e.getRootNode?e.getRootNode():e.ownerDocument;return t&&t.host?t:e.ownerDocument}function $(e,t){b(e.head||e,t)}function k(e,t,F){e.insertBefore(t,F||null)}function C(e){e.parentNode.removeChild(e)}function S(e){return document.createElement(e)}function z(e){return document.createTextNode(e)}function E(){return z(" ")}function A(e,t,F,n){return e.addEventListener(t,F,n),()=>e.removeEventListener(t,F,n)}function j(e,t,F){null==F?e.removeAttribute(t):e.getAttribute(t)!==F&&e.setAttribute(t,F)}function T(e,t){t=""+t,e.wholeText!==t&&(e.data=t)}function O(e,t,F,n){null===F?e.style.removeProperty(t):e.style.setProperty(t,F,n?"important":"")}function M(e,t){for(let F=0;F<e.options.length;F+=1){const n=e.options[F];if(n.__value===t)return void(n.selected=!0)}e.selectedIndex=-1}function P(e){const t=e.querySelector(":checked")||e.options[0];return t&&t.__value}function R(e,t,F){e.classList[F?"add":"remove"](t)}new Map;let D;function I(e){D=e}function L(){if(!D)throw new Error("Function called outside component initialization");return D}function q(e){L().$$.on_mount.push(e)}const B=[],G=[],Y=[],N=[],X=Promise.resolve();let J=!1;function K(){J||(J=!0,X.then(W))}function Q(e){Y.push(e)}const U=new Set;let V=0;function W(){const e=D;do{for(;V<B.length;){const e=B[V];V++,I(e),Z(e.$$)}for(I(null),B.length=0,V=0;G.length;)G.pop()();for(let e=0;e<Y.length;e+=1){const t=Y[e];U.has(t)||(U.add(t),t())}Y.length=0}while(B.length);for(;N.length;)N.pop()();J=!1,U.clear(),I(e)}function Z(e){if(null!==e.fragment){e.update(),s(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(Q)}}const ee=new Set;let te;function Fe(){te={r:0,c:[],p:te}}function ne(){te.r||s(te.c),te=te.p}function re(e,t){e&&e.i&&(ee.delete(e),e.i(t))}function oe(e,t,F,n){if(e&&e.o){if(ee.has(e))return;ee.add(e),te.c.push(()=>{ee.delete(e),n&&(F&&e.d(1),n())}),e.o(t)}else n&&n()}const ie="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let ae;function se(e,t,F,n){const{fragment:r,on_mount:o,on_destroy:a,after_update:l}=e.$$;r&&r.m(t,F),n||Q(()=>{const t=o.map(i).filter(c);a?a.push(...t):s(t),e.$$.on_mount=[]}),l.forEach(Q)}function ce(e,t){const F=e.$$;null!==F.fragment&&(s(F.on_destroy),F.fragment&&F.fragment.d(t),F.on_destroy=F.fragment=null,F.ctx=[])}function le(e,t,F,r,o,i,c,l=[-1]){const u=D;I(e);const f=e.$$={fragment:null,ctx:null,props:i,update:n,not_equal:o,bound:a(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(t.context||(u?u.$$.context:[])),callbacks:a(),dirty:l,skip_bound:!1,root:t.target||u.$$.root};c&&c(f.root);let d=!1;if(f.ctx=F?F(e,t.props||{},(t,F,...n)=>{const r=n.length?n[0]:F;return f.ctx&&o(f.ctx[t],f.ctx[t]=r)&&(!f.skip_bound&&f.bound[t]&&f.bound[t](r),d&&function(e,t){-1===e.$$.dirty[0]&&(B.push(e),K(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(e,t)),F}):[],f.update(),d=!0,s(f.before_update),f.fragment=!!r&&r(f.ctx),t.target){if(t.hydrate){x=!0;const e=(p=t.target,Array.from(p.childNodes));f.fragment&&f.fragment.l(e),e.forEach(C)}else f.fragment&&f.fragment.c();t.intro&&re(e.$$.fragment),se(e,t.target,t.anchor,t.customElement),x=!1,W()}var p;I(u)}"function"==typeof HTMLElement&&(ae=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:e}=this.$$;this.$$.on_disconnect=e.map(i).filter(c);for(const e in this.$$.slotted)this.appendChild(this.$$.slotted[e])}attributeChangedCallback(e,t,F){this[e]=F}disconnectedCallback(){s(this.$$.on_disconnect)}$destroy(){ce(this,1),this.$destroy=n}$on(e,t){const F=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return F.push(t),()=>{const e=F.indexOf(t);-1!==e&&F.splice(e,1)}}$set(e){this.$$set&&!d(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}});class ue{$destroy(){ce(this,1),this.$destroy=n}$on(e,t){const F=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return F.push(t),()=>{const e=F.indexOf(t);-1!==e&&F.splice(e,1)}}$set(e){this.$$set&&!d(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}function fe(e){let t,F,r,o,i,a,s,c,l,u,d,p,m,v,H,h,g=e[0]+1+"";return{c(){t=S("div"),F=S("img"),o=E(),i=S("div"),a=S("p"),s=z("Trajectory after curriculum step "),c=z(g),l=E(),u=S("input"),d=E(),p=S("p"),m=z("Move the slider to change the step!"),f(F.src,r="images/trajectories"+e[0]+".svg")||j(F,"src",r),j(F,"alt","Interactive plot displaying the trajectories of the RL agent on the map"),j(F,"height","300px"),j(F,"width","400px"),j(u,"type","range"),j(u,"min","0"),j(u,"max",de),u.value="0",j(p,"style",v="height: 1em; transition: 1s opacity; "+(e[1]&&"opacity: 0;")),O(i,"width","300px"),O(i,"margin","auto"),O(i,"text-align","center"),O(t,"display","flex"),O(t,"flex-direction","column"),O(t,"align-items","center")},m(n,r){k(n,t,r),b(t,F),b(t,o),b(t,i),b(i,a),b(a,s),b(a,c),b(i,l),b(i,u),b(i,d),b(i,p),b(p,m),H||(h=A(u,"input",e[2]),H=!0)},p(e,[t]){1&t&&!f(F.src,r="images/trajectories"+e[0]+".svg")&&j(F,"src",r),1&t&&g!==(g=e[0]+1+"")&&T(c,g),2&t&&v!==(v="height: 1em; transition: 1s opacity; "+(e[1]&&"opacity: 0;"))&&j(p,"style",v)},i:n,o:n,d(e){e&&C(t),H=!1,h()}}}const de=5;function pe(e,t,F){let n=0,r=!1;return[n,r,function(e){r||F(1,r=!0),F(0,n=parseInt(e.target.value))}]}var me=class extends ue{constructor(e){super(),le(this,e,pe,fe,l,{})}};function ve(e){let t,F,r,o,i,a,s,c,l,u,d,p,m,v,H,h;return{c(){t=S("div"),F=S("img"),o=E(),i=S("div"),a=S("p"),s=z("x = "),c=z(e[0]),l=E(),u=S("input"),d=E(),p=S("p"),m=z("Move the slider to change x!"),f(F.src,r="images/16x16_back"+e[0]+"_successes.svg")||j(F,"src",r),j(F,"alt","Interactive plot displaying the success rate of the back curriculum policy over the number of curriculum steps"),j(F,"height","300px"),j(F,"width","400px"),j(u,"type","range"),j(u,"min","1"),j(u,"max",He),u.value="0",j(p,"style",v="height: 1em; transition: 1s opacity; "+(e[1]&&"opacity: 0;")),O(i,"width","300px"),O(i,"margin","auto"),O(i,"text-align","center"),O(t,"display","flex"),O(t,"flex-direction","column"),O(t,"align-items","center")},m(n,r){k(n,t,r),b(t,F),b(t,o),b(t,i),b(i,a),b(a,s),b(a,c),b(i,l),b(i,u),b(i,d),b(i,p),b(p,m),H||(h=A(u,"input",e[2]),H=!0)},p(e,[t]){1&t&&!f(F.src,r="images/16x16_back"+e[0]+"_successes.svg")&&j(F,"src",r),1&t&&T(c,e[0]),2&t&&v!==(v="height: 1em; transition: 1s opacity; "+(e[1]&&"opacity: 0;"))&&j(p,"style",v)},i:n,o:n,d(e){e&&C(t),H=!1,h()}}}const He=9;function he(e,t,F){let n=1,r=!1;return[n,r,function(e){r||F(1,r=!0),F(0,n=parseInt(e.target.value))}]}var ge=class extends ue{constructor(e){super(),le(this,e,he,ve,l,{})}};function ye(e){let t,F,r,o,i,a,s,c,l,u,d,p,m,v,H,h;return{c(){t=S("div"),F=S("img"),o=E(),i=S("div"),a=S("p"),s=z("x = "),c=z(e[0]),l=E(),u=S("input"),d=E(),p=S("p"),m=z("Move the slider to change x!"),f(F.src,r="images/16x16_incremental"+e[0]+"_successes.svg")||j(F,"src",r),j(F,"alt","Interactive plot displaying the success rate of the incremental curriculum policy over the number of curriculum steps"),j(F,"height","300px"),j(F,"width","400px"),j(u,"type","range"),j(u,"min","0"),j(u,"max",xe),u.value="0",j(p,"style",v="height: 1em; transition: 1s opacity; "+(e[1]&&"opacity: 0;")),O(i,"width","300px"),O(i,"margin","auto"),O(i,"text-align","center"),O(t,"display","flex"),O(t,"flex-direction","column"),O(t,"align-items","center")},m(n,r){k(n,t,r),b(t,F),b(t,o),b(t,i),b(i,a),b(a,s),b(a,c),b(i,l),b(i,u),b(i,d),b(i,p),b(p,m),H||(h=A(u,"input",e[2]),H=!0)},p(e,[t]){1&t&&!f(F.src,r="images/16x16_incremental"+e[0]+"_successes.svg")&&j(F,"src",r),1&t&&T(c,e[0]),2&t&&v!==(v="height: 1em; transition: 1s opacity; "+(e[1]&&"opacity: 0;"))&&j(p,"style",v)},i:n,o:n,d(e){e&&C(t),H=!1,h()}}}const xe=4;function be(e,t,F){let n=0,r=!1;return[n,r,function(e){r||F(1,r=!0),F(0,n=parseInt(e.target.value))}]}var we=class extends ue{constructor(e){super(),le(this,e,be,ye,l,{})}};const _e=[];function $e(e,t=n){let F;const r=new Set;function o(t){if(l(e,t)&&(e=t,F)){const t=!_e.length;for(const t of r)t[1](),_e.push(t,e);if(t){for(let e=0;e<_e.length;e+=2)_e[e][0](_e[e+1]);_e.length=0}}}return{set:o,update:function(t){o(t(e))},subscribe:function(i,a=n){const s=[i,a];return r.add(s),1===r.size&&(F=t(o)||n),i(e),()=>{r.delete(s),0===r.size&&(F(),F=null)}}}}function ke(e){const t=e-1;return t*t*t+1}function Ce(e){return"[object Date]"===Object.prototype.toString.call(e)}function Se(e,t){if(e===t||e!=e)return()=>e;const F=typeof e;if(F!==typeof t||Array.isArray(e)!==Array.isArray(t))throw new Error("Cannot interpolate values of different type");if(Array.isArray(e)){const F=t.map((t,F)=>Se(e[F],t));return e=>F.map(t=>t(e))}if("object"===F){if(!e||!t)throw new Error("Object cannot be null");if(Ce(e)&&Ce(t)){e=e.getTime();const F=(t=t.getTime())-e;return t=>new Date(e+t*F)}const F=Object.keys(t),n={};return F.forEach(F=>{n[F]=Se(e[F],t[F])}),e=>{const t={};return F.forEach(F=>{t[F]=n[F](e)}),t}}if("number"===F){const F=t-e;return t=>e+t*F}throw new Error(`Cannot interpolate ${F} values`)}function ze(e){w(e,"svelte-io58ff",".confetti-holder.svelte-io58ff.svelte-io58ff{position:relative}@keyframes svelte-io58ff-rotate{0%{transform:skew(var(--skew)) rotate3d(var(--full-rotation))}100%{transform:skew(var(--skew)) rotate3d(var(--rotation-xyz), calc(var(--rotation-deg) + 360deg))}}@keyframes svelte-io58ff-translate{0%{opacity:1}8%{transform:translateY(calc(var(--translate-y) * 0.95)) translateX(calc(var(--translate-x) * (var(--x-spread) * 0.9)));opacity:1}12%{transform:translateY(var(--translate-y)) translateX(calc(var(--translate-x) * (var(--x-spread) * 0.95)));opacity:1}16%{transform:translateY(var(--translate-y)) translateX(calc(var(--translate-x) * var(--x-spread)));opacity:1}100%{transform:translateY(calc(var(--translate-y) + var(--fall-distance))) translateX(var(--translate-x));opacity:0}}@keyframes svelte-io58ff-no-gravity-translate{0%{opacity:1}100%{transform:translateY(var(--translate-y)) translateX(var(--translate-x));opacity:0}}.confetti.svelte-io58ff.svelte-io58ff{--translate-y:calc(-200px * var(--translate-y-multiplier));--translate-x:calc(200px * var(--translate-x-multiplier));position:absolute;height:calc(var(--size) * var(--scale));width:calc(var(--size) * var(--scale));animation:svelte-io58ff-translate var(--transition-duration) var(--transition-delay) var(--transition-iteration-count) linear;opacity:0;pointer-events:none}.confetti.svelte-io58ff.svelte-io58ff::before{--full-rotation:var(--rotation-xyz), var(--rotation-deg);content:'';display:block;width:100%;height:100%;background:var(--color);background-size:contain;transform:skew(var(--skew)) rotate3d(var(--full-rotation));animation:svelte-io58ff-rotate var(--transition-duration) var(--transition-delay) var(--transition-iteration-count) linear}.rounded.svelte-io58ff .confetti.svelte-io58ff::before{border-radius:50%}.cone.svelte-io58ff .confetti.svelte-io58ff{--translate-x:calc(200px * var(--translate-y-multiplier) * var(--translate-x-multiplier))}.no-gravity.svelte-io58ff .confetti.svelte-io58ff{animation-name:svelte-io58ff-no-gravity-translate;animation-timing-function:ease-out}@media(prefers-reduced-motion){.confetti.svelte-io58ff.svelte-io58ff,.confetti.svelte-io58ff.svelte-io58ff::before{animation:none}}")}function Ee(e,t,F){const n=e.slice();return n[18]=t[F],n}function Ae(e){let t,F={length:e[6]},n=[];for(let t=0;t<F.length;t+=1)n[t]=je(Ee(e,F,t));return{c(){t=S("div");for(let e=0;e<n.length;e+=1)n[e].c();j(t,"class","confetti-holder svelte-io58ff"),R(t,"rounded",e[9]),R(t,"cone",e[10]),R(t,"no-gravity",e[11])},m(e,F){k(e,t,F);for(let e=0;e<n.length;e+=1)n[e].m(t,null)},p(e,r){if(20991&r){let o;for(F={length:e[6]},o=0;o<F.length;o+=1){const i=Ee(e,F,o);n[o]?n[o].p(i,r):(n[o]=je(i),n[o].c(),n[o].m(t,null))}for(;o<n.length;o+=1)n[o].d(1);n.length=F.length}512&r&&R(t,"rounded",e[9]),1024&r&&R(t,"cone",e[10]),2048&r&&R(t,"no-gravity",e[11])},d(e){e&&C(t),function(e,t){for(let F=0;F<e.length;F+=1)e[F]&&e[F].d(t)}(n,e)}}}function je(e){let t;return{c(){t=S("div"),j(t,"class","confetti svelte-io58ff"),O(t,"--fall-distance",e[8]),O(t,"--size",e[0]+"px"),O(t,"--color",e[14]()),O(t,"--skew",Oe(-45,45)+"deg,"+Oe(-45,45)+"deg"),O(t,"--rotation-xyz",Oe(-10,10)+", "+Oe(-10,10)+", "+Oe(-10,10)),O(t,"--rotation-deg",Oe(0,360)+"deg"),O(t,"--translate-y-multiplier",Oe(e[2][0],e[2][1])),O(t,"--translate-x-multiplier",Oe(e[1][0],e[1][1])),O(t,"--scale",.1*Oe(2,10)),O(t,"--transition-duration",e[4]?`calc(${e[3]}ms * var(--scale))`:e[3]+"ms"),O(t,"--transition-delay",Oe(e[5][0],e[5][1])+"ms"),O(t,"--transition-iteration-count",e[4]?"infinite":e[7]),O(t,"--x-spread",1-e[12])},m(e,F){k(e,t,F)},p(e,F){256&F&&O(t,"--fall-distance",e[8]),1&F&&O(t,"--size",e[0]+"px"),4&F&&O(t,"--translate-y-multiplier",Oe(e[2][0],e[2][1])),2&F&&O(t,"--translate-x-multiplier",Oe(e[1][0],e[1][1])),24&F&&O(t,"--transition-duration",e[4]?`calc(${e[3]}ms * var(--scale))`:e[3]+"ms"),32&F&&O(t,"--transition-delay",Oe(e[5][0],e[5][1])+"ms"),144&F&&O(t,"--transition-iteration-count",e[4]?"infinite":e[7]),4096&F&&O(t,"--x-spread",1-e[12])},d(e){e&&C(t)}}}function Te(e){let t,F=!e[13]&&Ae(e);return{c(){F&&F.c(),t=z("")},m(e,n){F&&F.m(e,n),k(e,t,n)},p(e,[n]){e[13]?F&&(F.d(1),F=null):F?F.p(e,n):(F=Ae(e),F.c(),F.m(t.parentNode,t))},i:n,o:n,d(e){F&&F.d(e),e&&C(t)}}}function Oe(e,t){return Math.random()*(t-e)+e}function Me(e,t,F){let{size:n=10}=t,{x:r=[-.5,.5]}=t,{y:o=[.25,1]}=t,{duration:i=2e3}=t,{infinite:a=!1}=t,{delay:s=[0,50]}=t,{colorRange:c=[0,360]}=t,{colorArray:l=[]}=t,{amount:u=50}=t,{iterationCount:f=1}=t,{fallDistance:d="100px"}=t,{rounded:p=!1}=t,{cone:m=!1}=t,{noGravity:v=!1}=t,{xSpread:H=.15}=t,{destroyOnComplete:h=!0}=t,g=!1;return q(()=>{h&&!a&&"infinite"!=f&&setTimeout(()=>F(13,g=!0),(i+s[1])*f)}),e.$$set=e=>{"size"in e&&F(0,n=e.size),"x"in e&&F(1,r=e.x),"y"in e&&F(2,o=e.y),"duration"in e&&F(3,i=e.duration),"infinite"in e&&F(4,a=e.infinite),"delay"in e&&F(5,s=e.delay),"colorRange"in e&&F(15,c=e.colorRange),"colorArray"in e&&F(16,l=e.colorArray),"amount"in e&&F(6,u=e.amount),"iterationCount"in e&&F(7,f=e.iterationCount),"fallDistance"in e&&F(8,d=e.fallDistance),"rounded"in e&&F(9,p=e.rounded),"cone"in e&&F(10,m=e.cone),"noGravity"in e&&F(11,v=e.noGravity),"xSpread"in e&&F(12,H=e.xSpread),"destroyOnComplete"in e&&F(17,h=e.destroyOnComplete)},[n,r,o,i,a,s,u,f,d,p,m,v,H,g,function(){return l.length?l[Math.round(Math.random()*(l.length-1))]:`hsl(${Math.round(Oe(c[0],c[1]))}, 75%, 50%`},c,l,h]}var Pe=class extends ue{constructor(e){super(),le(this,e,Me,Te,l,{size:0,x:1,y:2,duration:3,infinite:4,delay:5,colorRange:15,colorArray:16,amount:6,iterationCount:7,fallDistance:8,rounded:9,cone:10,noGravity:11,xSpread:12,destroyOnComplete:17},ze)}};const Re={small:["SFFFFFFFFF","FFFFFFFFFF","HFFFFFFFFF","FFHFFFFFFF","HFFFFHFFFF","FFHFFFHFFF","HFFFFHFFFF","FFHFFFFFFF","HFFFFFFFFF","FFFGFFFFFF"],"16x16":["HHFFFFFFFFFFFFHH","HFFFFFFFFFFFFFFH","FFFFFFFFFFFFFFFF","FFFHHHFFFFHHHFFF","FFFHHHFFFFHHHFFF","FFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFF","FFFFFFFFGFFFFFFF","FFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFF","FFFHHHFFFFHHHFFF","FFFHHHHHHHHHHFFF","FFFFHHHHHHHHFFFF","FFFFFFFFFFFFFFFF","HFFFFFFFSFFFFFFH","HHFFFFFFFFFFFFHH"],"32x32":["HHHHHHFFFFFFFFFFFFFFFFFHHHHHHHHH","HHFFFFFFFFFFFFFFFFFFFFFFHHHHHHHH","FFFFSFFFHHFFFFFFFFFFFFFFFFFFFFFH","FFFFFFFFFHFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HHFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HHHHHFFFFFFFFFHHHHHHHHFFFFFFFFFF","HHHHHHHHHHHHHHHHHHHHHHHFFFFFFFFF","HHHHHHHHHHHHHHHHHHHHHHFFFFFFFFFF","HHFFHHHHHHHHHHHHFFFFFFFFFFFFFFFF","HFFFFFFFFFFFFHHHHHFFFFFFFFFFFFFF","HFFFFFFFFFFFFFFHHFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHHHFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHHHFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFHHHHFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFHHHHHF","FFFFFFFFFFFFFFFFFFFFFFFFFFFHHHHH","FFFFFFFFFFFFFFFFFFFFFFFFFFHHHHHH","FFFFFFFFFFFFFFFFFFFFFFFFFHHHHFFH","FFFFFFFFFFFFFFFFFFFFFFFFFFHHFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFGFFFFFFFHFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFHFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHFFHFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HFFFFFFFFFFFFFFFFFFFFFFHFFFFFFFF","HHHHHHHFFFFFFFFFFFFFFFFFFFFFFFFF","HHHHHHHHHHHHFFFFFFFFFFFFFFFFFFFF"]},De={H:"#1976d2",S:"#ef9a9a",F:"#e1f5fe",G:"#81c784",T:"#ffe0b2"};const{window:Ie}=ie;function Le(e){w(e,"svelte-c3s6cr","canvas.svelte-c3s6cr.svelte-c3s6cr{padding:1em\n  }.game.svelte-c3s6cr.svelte-c3s6cr{display:flex;flex-direction:column;align-items:center;justify-content:center;padding-bottom:1.5em}.controls.svelte-c3s6cr.svelte-c3s6cr{display:flex;flex-direction:column;align-items:center}.status.svelte-c3s6cr.svelte-c3s6cr{height:1em;width:16em;text-align:center;transition:color 1s;padding-top:1em}.map.svelte-c3s6cr.svelte-c3s6cr{display:flex;flex-direction:column;align-items:center}.menu.svelte-c3s6cr.svelte-c3s6cr{display:flex;flex-direction:row;align-items:center;padding:0.5em}.menu.svelte-c3s6cr div.svelte-c3s6cr{margin:0.3em;display:flex;flex-direction:column}.key.svelte-c3s6cr.svelte-c3s6cr{background-color:#eee;border-radius:4px;font-size:1em;padding:0.5em 0.5em;border-top:5px solid rgba(255, 255, 255, 0.5);border-left:5px solid rgba(255, 255, 255, 0.5);border-right:5px solid rgba(0, 0, 0, 0.2);border-bottom:5px solid rgba(0, 0, 0, 0.2);color:#555;text-align:center;width:4em;height:4em;cursor:pointer}@media(min-width: 768px){.game.svelte-c3s6cr.svelte-c3s6cr{flex-direction:row}.controls.svelte-c3s6cr.svelte-c3s6cr{flex-direction:column}.menu.svelte-c3s6cr.svelte-c3s6cr{flex-direction:column}.menu.svelte-c3s6cr div.svelte-c3s6cr{flex-direction:row;gap:10px}.key.svelte-c3s6cr.svelte-c3s6cr{width:3em;height:3em}}.keyboard.svelte-c3s6cr.svelte-c3s6cr{display:grid;grid-template-columns:auto auto auto;grid-gap:0.5em;padding:1em}.key.svelte-c3s6cr.svelte-c3s6cr:active{background-color:#ddd}")}function qe(e){let t,F;return t=new Pe({props:{cone:!0,delay:[0,200],amount:"50",x:[-.7,.7],y:[.5,1.5]}}),{c(){var e;(e=t.$$.fragment)&&e.c()},m(e,n){se(t,e,n),F=!0},i(e){F||(re(t.$$.fragment,e),F=!0)},o(e){oe(t.$$.fragment,e),F=!1},d(e){ce(t,e)}}}function Be(e){let t;return{c(){t=S("p"),t.textContent="Press the arrow keys to move...",j(t,"class","status svelte-c3s6cr")},m(e,F){k(e,t,F)},p:n,d(e){e&&C(t)}}}function Ge(e){let t,F;return{c(){t=S("p"),F=z(e[10]),j(t,"class","status svelte-c3s6cr"),O(t,"transition","color "+(e[10]?2:0)+"s"),O(t,"transition-timing-function","ease-in"),O(t,"color",e[10]?"white":"black")},m(e,n){k(e,t,n),b(t,F)},p(e,n){1024&n[0]&&T(F,e[10]),1024&n[0]&&O(t,"transition","color "+(e[10]?2:0)+"s"),1024&n[0]&&O(t,"color",e[10]?"white":"black")},d(e){e&&C(t)}}}function Ye(e){let t,F,n,r,o,i,a,c,l,u,d,p,m,v,H,h,g,y,x,w,_,$,z,T,P,R,D,I,L,q,B,G,Y,N,X,J,K,U,V,W,Z,ee,te,ie,ae,se,ce,le,ue,fe,de,pe,me,ve=e[11]&&qe();function He(e,t){return e[9]?Ge:Be}let he=He(e),ge=he(e);return{c(){t=S("div"),F=S("div"),n=S("canvas"),i=E(),a=S("img"),l=E(),ve&&ve.c(),u=E(),d=S("div"),ge.c(),p=E(),m=S("div"),v=S("div"),H=S("label"),H.textContent="Choose a map:",h=E(),g=S("select"),y=S("option"),y.textContent="Frozen Lake",x=S("option"),x.textContent="Frozen Smiley",w=S("option"),w.textContent="Large Lake",_=E(),$=S("div"),z=S("label"),z.textContent="Add a teacher:",T=E(),P=S("select"),R=S("option"),R.textContent="No Teacher",D=S("option"),D.textContent="Distance 1",I=S("option"),I.textContent="Distance 2",L=E(),q=S("div"),B=S("label"),B.textContent="Reset strategy:",G=E(),Y=S("select"),N=S("option"),N.textContent="Soft Reset",X=S("option"),X.textContent="Back 4",J=S("option"),J.textContent="Hard Reset",U=E(),V=S("div"),W=S("div"),Z=E(),ee=S("button"),ee.textContent="↑",te=E(),ie=S("div"),ae=E(),se=S("button"),se.textContent="←",ce=E(),le=S("button"),le.textContent="↓",ue=E(),fe=S("button"),fe.textContent="→",j(n,"width",r=500*e[12]),j(n,"height",o=500*e[12]),O(n,"width","300px"),O(n,"height","300px"),j(n,"class","svelte-c3s6cr"),j(a,"width","300"),j(a,"alt","Legend for the above mini-game"),f(a.src,c="./images/map_legend_stacked.svg")||j(a,"src","./images/map_legend_stacked.svg"),j(F,"class","map svelte-c3s6cr"),j(H,"for","map"),y.__value="small",y.value=y.__value,x.__value="16x16",x.value=x.__value,w.__value="32x32",w.value=w.__value,j(g,"name","map"),j(g,"id","map"),void 0===e[1]&&Q(()=>e[18].call(g)),j(v,"class","svelte-c3s6cr"),j(z,"for","teacher"),R.__value="0",R.value=R.__value,D.__value="1",D.value=D.__value,I.__value="2",I.value=I.__value,j(P,"name","teacher"),j(P,"id","teacher"),void 0===e[2]&&Q(()=>e[19].call(P)),j($,"class","svelte-c3s6cr"),j(B,"for","reset"),N.__value="SR",N.value=N.__value,X.__value="B4",X.value=X.__value,J.__value="HR",J.value=J.__value,j(Y,"name","reset"),j(Y,"id","reset"),Y.disabled=K=0==e[2],void 0===e[3]&&Q(()=>e[20].call(Y)),j(q,"class","svelte-c3s6cr"),j(m,"class","menu svelte-c3s6cr"),j(ee,"class","key svelte-c3s6cr"),j(se,"class","key svelte-c3s6cr"),j(le,"class","key svelte-c3s6cr"),j(fe,"class","key svelte-c3s6cr"),j(V,"class","keyboard svelte-c3s6cr"),j(d,"class","controls svelte-c3s6cr"),j(t,"class","game svelte-c3s6cr")},m(r,o){k(r,t,o),b(t,F),b(F,n),e[16](n),b(F,i),b(F,a),b(F,l),ve&&ve.m(F,null),b(t,u),b(t,d),ge.m(d,null),b(d,p),b(d,m),b(m,v),b(v,H),b(v,h),b(v,g),b(g,y),b(g,x),b(g,w),M(g,e[1]),b(m,_),b(m,$),b($,z),b($,T),b($,P),b(P,R),b(P,D),b(P,I),M(P,e[2]),b(m,L),b(m,q),b(q,B),b(q,G),b(q,Y),b(Y,N),b(Y,X),b(Y,J),M(Y,e[3]),b(d,U),b(d,V),b(V,W),b(V,Z),b(V,ee),b(V,te),b(V,ie),b(V,ae),b(V,se),b(V,ce),b(V,le),b(V,ue),b(V,fe),de=!0,pe||(me=[A(Ie,"keydown",e[14]),A(n,"click",e[17]),A(g,"change",e[18]),A(g,"change",e[13]),A(P,"change",e[19]),A(Y,"change",e[20]),A(ee,"click",e[21]),A(se,"click",e[22]),A(le,"click",e[23]),A(fe,"click",e[24])],pe=!0)},p(e,t){(!de||4096&t[0]&&r!==(r=500*e[12]))&&j(n,"width",r),(!de||4096&t[0]&&o!==(o=500*e[12]))&&j(n,"height",o),e[11]?ve?2048&t[0]&&re(ve,1):(ve=qe(),ve.c(),re(ve,1),ve.m(F,null)):ve&&(Fe(),oe(ve,1,1,()=>{ve=null}),ne()),he===(he=He(e))&&ge?ge.p(e,t):(ge.d(1),ge=he(e),ge&&(ge.c(),ge.m(d,p))),2&t[0]&&M(g,e[1]),4&t[0]&&M(P,e[2]),(!de||4&t[0]&&K!==(K=0==e[2]))&&(Y.disabled=K),8&t[0]&&M(Y,e[3])},i(e){de||(re(ve),de=!0)},o(e){oe(ve),de=!1},d(F){F&&C(t),e[16](null),ve&&ve.d(),ge.d(),pe=!1,s(me)}}}function Ne(e,t,F){let i,a,s,c,l,u=n;e.$$.on_destroy.push(()=>u());var f,d,m,H=!1,h=!1,g=!1,x=!1,b=!0,w=[],_=!1,$="",k=null,C=!1;const S=new Image;S.src="./images/robot.png";const z=new Image;z.src="./images/robot-flipped.png";var E=!1,A=S;function j(e){F(10,$=""),clearTimeout(k),setTimeout(()=>{F(10,$=e)},1),k=setTimeout(()=>{F(10,$="")},2e3)}q(()=>{const e=a.getContext("2d");var t,n,$,k,T;function O(e){let t=e.length,F=e[0].length,n=new Array(t).fill(!1).map(()=>new Array(F).fill(!1));for(let o=0;o<t;o++)for(let t=0;t<F;t++){var r=!1;try{r|=e[o][t+1]}catch(e){}try{r|=e[o+1][t]}catch(e){}try{r|=e[o][t-1]}catch(e){}try{r|=e[o-1][t]}catch(e){}n[o][t]=r}return n}function M(){n=Re[s],t=a.height/n.length,T=function(e,t){if(0==t)return e;var F=new Array;for(let e=0;e<n.length;e++)F.push(n[e].split(""));let r=F.map(e=>e.map(e=>"H"==e)),o=F.map(e=>e.map(e=>"F"==e));var i,a=Array.from(r);for(let e=0;e<t;e++)i=O(a),a=i.map((e,t)=>e.map((e,F)=>e||a[t][F]));var s=Array.from(F);for(let e=0;e<F.length;e++)for(let t=0;t<F[0].length;t++)i[e][t]&&o[e][t]&&(s[e][t]="T");let c=new Array;for(let t=0;t<e.length;t++)c.push(s[t].join(""));return c}(n,c);for(let F=0;F<n.length;F++)for(let r=0;r<n[0].length;r++){let n=T[F][r];"S"==n&&($=[r,F]);let o=r*t,i=F*t;e.beginPath(),e.rect(o,i,t+1,t+1),e.fillStyle=De[n],e.fill(),e.closePath()}}function P(e){f.set(e),d=e,w.push(d)}function R(){w=[],P($)}F(12,m=window.devicePixelRatio),e.scale(m,m),M(),function s(){(h||H||g||x)&&F(9,_=!0),e.clearRect(0,0,a.width,a.height),M(),b&&(F(8,f=function(e,t={}){const F=$e(e);let n,i=e;function a(a,s){if(null==e)return F.set(e=a),Promise.resolve();i=a;let c=n,l=!1,{delay:u=0,duration:f=400,easing:d=r,interpolate:p=Se}=o(o({},t),s);if(0===f)return c&&(c.abort(),c=null),F.set(e=i),Promise.resolve();const m=v()+u;let H;return n=y(t=>{if(t<m)return!0;l||(H=p(e,a),"function"==typeof f&&(f=f(e,a)),l=!0),c&&(c.abort(),c=null);const n=t-m;return n>f?(F.set(e=a),!1):(F.set(e=H(d(n/f))),!0)}),n.promise}return{set:a,update:(t,F)=>a(t(i,e),F),subscribe:F.subscribe}}($,{duration:150,easing:ke})),u(),u=p(f,e=>F(33,i=e)),R()),async function(){A=E?z:S,e.drawImage(A,i[0]*t,i[1]*t,t,t)}();const c=Math.random();h||H?c<.1?(F(5,h=!1),F(4,H=!1),F(6,g=!0)):c<.2&&(F(5,h=!1),F(4,H=!1),F(7,x=!0)):(g||x)&&(c<.1?(F(6,g=!1),F(7,x=!1),F(5,h=!0)):c<.2&&(F(6,g=!1),F(7,x=!1),F(4,H=!0))),c<.2&&(g||x||h||H)&&j("You just slipped."),h&&(E=!0),H&&(E=!1),k=Array.from(d);let[m,O]=Array.from(k);if(H?m<n[0].length-1&&(m+=1):h?m>0&&(m-=1):g?O>0&&(O-=1):x&&O<n.length-1&&(O+=1),(H||h||x||g)&&P([m,O]),"G"==n[O][m])F(11,C=!0),setTimeout(()=>{F(11,C=!1)},3e3),j("You won!"),R();else if("H"==n[O][m])j("You failed."),R();else if("T"==T[O][m]){if("HR"==l)R();else if("B4"==l){for(let e=0;e<4&&w.length>1;e++)w.pop();P(w[w.length-1])}else"SR"==l&&P(k);j("The teacher set you back.")}b=!1,F(4,H=!1),F(5,h=!1),F(6,g=!1),F(7,x=!1),requestAnimationFrame(s)}()});return[a,s,c,l,H,h,g,x,f,_,$,C,m,function(){b=!0},function(e){39==e.keyCode||"d"==e.key?(F(4,H=!0),e.preventDefault()):37==e.keyCode||"a"==e.key?(F(5,h=!0),e.preventDefault()):38==e.keyCode||"w"==e.key?(F(6,g=!0),e.preventDefault()):40!=e.keyCode&&"s"!=e.key||(F(7,x=!0),e.preventDefault())},j,function(e){G[e?"unshift":"push"](()=>{a=e,F(0,a)})},()=>j("Press the arrow keys to move..."),function(){s=P(this),F(1,s)},function(){c=P(this),F(2,c)},function(){l=P(this),F(3,l)},()=>F(6,g=!0),()=>F(5,h=!0),()=>F(7,x=!0),()=>F(4,H=!0)]}var Xe=class extends ue{constructor(e){super(),le(this,e,Ne,Ye,l,{},Le,[-1,-1])}},Je=document.getElementById("trajectories-visualization");Je.addEventListener("ready",(function(){var e=Je.querySelector("#trajectories-visualization-target");new me({target:e})}));var Ke=document.getElementById("back-visualization");Ke.addEventListener("ready",(function(){var e=Ke.querySelector("#back-visualization-target");new ge({target:e})}));var Qe=document.getElementById("incremental-visualization");Qe.addEventListener("ready",(function(){var e=Qe.querySelector("#incremental-visualization-target");new we({target:e})}));var Ue=document.getElementById("grid-visualization");Ue.addEventListener("ready",(function(){var e=Ue.querySelector("#grid-visualization-target");new Xe({target:e})}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,