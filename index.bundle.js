!function(e){var t={};function F(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,F),o.l=!0,o.exports}F.m=e,F.c=t,F.d=function(e,t,n){F.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},F.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},F.t=function(e,t){if(1&t&&(e=F(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(F.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)F.d(n,o,function(t){return e[t]}.bind(null,o));return n},F.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return F.d(t,"a",t),t},F.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},F.p="",F(F.s=0)}([function(e,t,F){"use strict";F.r(t);function n(){}const o=e=>e;function r(e,t){for(const F in t)e[F]=t[F];return e}function i(e){return e()}function a(){return Object.create(null)}function l(e){e.forEach(i)}function s(e){return"function"==typeof e}function c(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e}let u;function d(e,t){return u||(u=document.createElement("a")),u.href=t,e===u.href}function f(e){return 0===Object.keys(e).length}function p(e,...t){if(null==e)return n;const F=e.subscribe(...t);return F.unsubscribe?()=>F.unsubscribe():F}const v="undefined"!=typeof window;let m=v?()=>window.performance.now():()=>Date.now(),H=v?e=>requestAnimationFrame(e):n;const g=new Set;function h(e){g.forEach(t=>{t.c(e)||(g.delete(t),t.f())}),0!==g.size&&H(h)}function y(e){let t;return 0===g.size&&H(h),{promise:new Promise(F=>{g.add(t={c:e,f:F})}),abort(){g.delete(t)}}}let x=!1;function b(e,t){e.appendChild(t)}function z(e,t,F){const n=w(e);if(!n.getElementById(t)){const e=k("style");e.id=t,e.textContent=F,q(n,e)}}function w(e){if(!e)return document;const t=e.getRootNode?e.getRootNode():e.ownerDocument;return t&&t.host?t:e.ownerDocument}function q(e,t){b(e.head||e,t)}function $(e,t,F){e.insertBefore(t,F||null)}function _(e){e.parentNode.removeChild(e)}function k(e){return document.createElement(e)}function C(e){return document.createTextNode(e)}function S(){return C(" ")}function E(e,t,F,n){return e.addEventListener(t,F,n),()=>e.removeEventListener(t,F,n)}function j(e,t,F){null==F?e.removeAttribute(t):e.getAttribute(t)!==F&&e.setAttribute(t,F)}function A(e,t){t=""+t,e.wholeText!==t&&(e.data=t)}function T(e,t,F,n){null===F?e.style.removeProperty(t):e.style.setProperty(t,F,n?"important":"")}function O(e,t){for(let F=0;F<e.options.length;F+=1){const n=e.options[F];if(n.__value===t)return void(n.selected=!0)}e.selectedIndex=-1}function D(e){const t=e.querySelector(":checked")||e.options[0];return t&&t.__value}function M(e,t,F){e.classList[F?"add":"remove"](t)}new Map;let P;function R(e){P=e}function I(){if(!P)throw new Error("Function called outside component initialization");return P}function L(e){I().$$.on_mount.push(e)}const G=[],B=[],Y=[],N=[],X=Promise.resolve();let J=!1;function K(){J||(J=!0,X.then(W))}function Q(e){Y.push(e)}const U=new Set;let V=0;function W(){const e=P;do{for(;V<G.length;){const e=G[V];V++,R(e),Z(e.$$)}for(R(null),G.length=0,V=0;B.length;)B.pop()();for(let e=0;e<Y.length;e+=1){const t=Y[e];U.has(t)||(U.add(t),t())}Y.length=0}while(G.length);for(;N.length;)N.pop()();J=!1,U.clear(),R(e)}function Z(e){if(null!==e.fragment){e.update(),l(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(Q)}}const ee=new Set;let te;function Fe(){te={r:0,c:[],p:te}}function ne(){te.r||l(te.c),te=te.p}function oe(e,t){e&&e.i&&(ee.delete(e),e.i(t))}function re(e,t,F,n){if(e&&e.o){if(ee.has(e))return;ee.add(e),te.c.push(()=>{ee.delete(e),n&&(F&&e.d(1),n())}),e.o(t)}else n&&n()}const ie="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let ae;function le(e,t,F,n){const{fragment:o,on_mount:r,on_destroy:a,after_update:c}=e.$$;o&&o.m(t,F),n||Q(()=>{const t=r.map(i).filter(s);a?a.push(...t):l(t),e.$$.on_mount=[]}),c.forEach(Q)}function se(e,t){const F=e.$$;null!==F.fragment&&(l(F.on_destroy),F.fragment&&F.fragment.d(t),F.on_destroy=F.fragment=null,F.ctx=[])}function ce(e,t,F,o,r,i,s,c=[-1]){const u=P;R(e);const d=e.$$={fragment:null,ctx:null,props:i,update:n,not_equal:r,bound:a(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(t.context||(u?u.$$.context:[])),callbacks:a(),dirty:c,skip_bound:!1,root:t.target||u.$$.root};s&&s(d.root);let f=!1;if(d.ctx=F?F(e,t.props||{},(t,F,...n)=>{const o=n.length?n[0]:F;return d.ctx&&r(d.ctx[t],d.ctx[t]=o)&&(!d.skip_bound&&d.bound[t]&&d.bound[t](o),f&&function(e,t){-1===e.$$.dirty[0]&&(G.push(e),K(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(e,t)),F}):[],d.update(),f=!0,l(d.before_update),d.fragment=!!o&&o(d.ctx),t.target){if(t.hydrate){x=!0;const e=(p=t.target,Array.from(p.childNodes));d.fragment&&d.fragment.l(e),e.forEach(_)}else d.fragment&&d.fragment.c();t.intro&&oe(e.$$.fragment),le(e,t.target,t.anchor,t.customElement),x=!1,W()}var p;R(u)}"function"==typeof HTMLElement&&(ae=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:e}=this.$$;this.$$.on_disconnect=e.map(i).filter(s);for(const e in this.$$.slotted)this.appendChild(this.$$.slotted[e])}attributeChangedCallback(e,t,F){this[e]=F}disconnectedCallback(){l(this.$$.on_disconnect)}$destroy(){se(this,1),this.$destroy=n}$on(e,t){const F=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return F.push(t),()=>{const e=F.indexOf(t);-1!==e&&F.splice(e,1)}}$set(e){this.$$set&&!f(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}});class ue{$destroy(){se(this,1),this.$destroy=n}$on(e,t){const F=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return F.push(t),()=>{const e=F.indexOf(t);-1!==e&&F.splice(e,1)}}$set(e){this.$$set&&!f(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}function de(e){let t,F,o,r,i,a,l,s,c,u,f,p,v,m,H,g,h=e[0]+1+"";return{c(){t=k("div"),F=k("img"),r=S(),i=k("div"),a=k("p"),l=C("Trajectory after curriculum step "),s=C(h),c=S(),u=k("input"),f=S(),p=k("p"),v=C("Move the slider to change the step!"),d(F.src,o="images/trajectories"+e[0]+".svg")||j(F,"src",o),j(F,"alt","Interactive plot displaying the trajectories of the RL agent on the map"),j(u,"type","range"),j(u,"min","0"),j(u,"max",fe),u.value="0",j(p,"style",m="transition: 1s opacity; "+(e[1]&&"opacity: 0;")),T(i,"text-align","center"),T(t,"display","flex"),T(t,"flex-direction","column"),T(t,"align-items","center"),T(t,"padding-top","1em")},m(n,o){$(n,t,o),b(t,F),b(t,r),b(t,i),b(i,a),b(a,l),b(a,s),b(i,c),b(i,u),b(i,f),b(i,p),b(p,v),H||(g=E(u,"input",e[2]),H=!0)},p(e,[t]){1&t&&!d(F.src,o="images/trajectories"+e[0]+".svg")&&j(F,"src",o),1&t&&h!==(h=e[0]+1+"")&&A(s,h),2&t&&m!==(m="transition: 1s opacity; "+(e[1]&&"opacity: 0;"))&&j(p,"style",m)},i:n,o:n,d(e){e&&_(t),H=!1,g()}}}const fe=5;function pe(e,t,F){let n=0,o=!1;return[n,o,function(e){o||F(1,o=!0),F(0,n=parseInt(e.target.value))}]}var ve=class extends ue{constructor(e){super(),ce(this,e,pe,de,c,{})}};function me(e){let t,F,o,r,i,a,l,s,c,u,f,p,v,m,H,g;return{c(){t=k("div"),F=k("img"),r=S(),i=k("div"),a=k("p"),l=C("x = "),s=C(e[0]),c=S(),u=k("input"),f=S(),p=k("p"),v=C("Move the slider to change x!"),d(F.src,o="images/16x16_back"+e[0]+"_successes.svg")||j(F,"src",o),j(F,"alt","Interactive plot displaying the success rate of the back curriculum policy over the number of curriculum steps"),j(u,"type","range"),j(u,"min","1"),j(u,"max",He),u.value="0",j(p,"style",m="transition: 1s opacity; "+(e[1]&&"opacity: 0;")),T(i,"text-align","center"),T(t,"display","flex"),T(t,"flex-direction","column"),T(t,"align-items","center")},m(n,o){$(n,t,o),b(t,F),b(t,r),b(t,i),b(i,a),b(a,l),b(a,s),b(i,c),b(i,u),b(i,f),b(i,p),b(p,v),H||(g=E(u,"input",e[2]),H=!0)},p(e,[t]){1&t&&!d(F.src,o="images/16x16_back"+e[0]+"_successes.svg")&&j(F,"src",o),1&t&&A(s,e[0]),2&t&&m!==(m="transition: 1s opacity; "+(e[1]&&"opacity: 0;"))&&j(p,"style",m)},i:n,o:n,d(e){e&&_(t),H=!1,g()}}}const He=9;function ge(e,t,F){let n=1,o=!1;return[n,o,function(e){o||F(1,o=!0),F(0,n=parseInt(e.target.value))}]}var he=class extends ue{constructor(e){super(),ce(this,e,ge,me,c,{})}};function ye(e){let t,F,o,r,i,a,l,s,c,u,f,p,v,m,H,g;return{c(){t=k("div"),F=k("img"),r=S(),i=k("div"),a=k("p"),l=C("x = "),s=C(e[0]),c=S(),u=k("input"),f=S(),p=k("p"),v=C("Move the slider to change x!"),d(F.src,o="images/16x16_incremental"+e[0]+"_successes.svg")||j(F,"src",o),j(F,"alt","Interactive plot displaying the success rate of the incremental curriculum policy over the number of curriculum steps"),j(u,"type","range"),j(u,"min","0"),j(u,"max",xe),u.value="0",j(p,"style",m="transition: 1s opacity; "+(e[1]&&"opacity: 0;")),T(i,"text-align","center"),T(t,"display","flex"),T(t,"flex-direction","column"),T(t,"align-items","center")},m(n,o){$(n,t,o),b(t,F),b(t,r),b(t,i),b(i,a),b(a,l),b(a,s),b(i,c),b(i,u),b(i,f),b(i,p),b(p,v),H||(g=E(u,"input",e[2]),H=!0)},p(e,[t]){1&t&&!d(F.src,o="images/16x16_incremental"+e[0]+"_successes.svg")&&j(F,"src",o),1&t&&A(s,e[0]),2&t&&m!==(m="transition: 1s opacity; "+(e[1]&&"opacity: 0;"))&&j(p,"style",m)},i:n,o:n,d(e){e&&_(t),H=!1,g()}}}const xe=4;function be(e,t,F){let n=0,o=!1;return[n,o,function(e){o||F(1,o=!0),F(0,n=parseInt(e.target.value))}]}var ze=class extends ue{constructor(e){super(),ce(this,e,be,ye,c,{})}};const we=[];function qe(e,t=n){let F;const o=new Set;function r(t){if(c(e,t)&&(e=t,F)){const t=!we.length;for(const t of o)t[1](),we.push(t,e);if(t){for(let e=0;e<we.length;e+=2)we[e][0](we[e+1]);we.length=0}}}return{set:r,update:function(t){r(t(e))},subscribe:function(i,a=n){const l=[i,a];return o.add(l),1===o.size&&(F=t(r)||n),i(e),()=>{o.delete(l),0===o.size&&(F(),F=null)}}}}function $e(e){const t=e-1;return t*t*t+1}function _e(e){return"[object Date]"===Object.prototype.toString.call(e)}function ke(e,t){if(e===t||e!=e)return()=>e;const F=typeof e;if(F!==typeof t||Array.isArray(e)!==Array.isArray(t))throw new Error("Cannot interpolate values of different type");if(Array.isArray(e)){const F=t.map((t,F)=>ke(e[F],t));return e=>F.map(t=>t(e))}if("object"===F){if(!e||!t)throw new Error("Object cannot be null");if(_e(e)&&_e(t)){e=e.getTime();const F=(t=t.getTime())-e;return t=>new Date(e+t*F)}const F=Object.keys(t),n={};return F.forEach(F=>{n[F]=ke(e[F],t[F])}),e=>{const t={};return F.forEach(F=>{t[F]=n[F](e)}),t}}if("number"===F){const F=t-e;return t=>e+t*F}throw new Error(`Cannot interpolate ${F} values`)}function Ce(e){z(e,"svelte-io58ff",".confetti-holder.svelte-io58ff.svelte-io58ff{position:relative}@keyframes svelte-io58ff-rotate{0%{transform:skew(var(--skew)) rotate3d(var(--full-rotation))}100%{transform:skew(var(--skew)) rotate3d(var(--rotation-xyz), calc(var(--rotation-deg) + 360deg))}}@keyframes svelte-io58ff-translate{0%{opacity:1}8%{transform:translateY(calc(var(--translate-y) * 0.95)) translateX(calc(var(--translate-x) * (var(--x-spread) * 0.9)));opacity:1}12%{transform:translateY(var(--translate-y)) translateX(calc(var(--translate-x) * (var(--x-spread) * 0.95)));opacity:1}16%{transform:translateY(var(--translate-y)) translateX(calc(var(--translate-x) * var(--x-spread)));opacity:1}100%{transform:translateY(calc(var(--translate-y) + var(--fall-distance))) translateX(var(--translate-x));opacity:0}}@keyframes svelte-io58ff-no-gravity-translate{0%{opacity:1}100%{transform:translateY(var(--translate-y)) translateX(var(--translate-x));opacity:0}}.confetti.svelte-io58ff.svelte-io58ff{--translate-y:calc(-200px * var(--translate-y-multiplier));--translate-x:calc(200px * var(--translate-x-multiplier));position:absolute;height:calc(var(--size) * var(--scale));width:calc(var(--size) * var(--scale));animation:svelte-io58ff-translate var(--transition-duration) var(--transition-delay) var(--transition-iteration-count) linear;opacity:0;pointer-events:none}.confetti.svelte-io58ff.svelte-io58ff::before{--full-rotation:var(--rotation-xyz), var(--rotation-deg);content:'';display:block;width:100%;height:100%;background:var(--color);background-size:contain;transform:skew(var(--skew)) rotate3d(var(--full-rotation));animation:svelte-io58ff-rotate var(--transition-duration) var(--transition-delay) var(--transition-iteration-count) linear}.rounded.svelte-io58ff .confetti.svelte-io58ff::before{border-radius:50%}.cone.svelte-io58ff .confetti.svelte-io58ff{--translate-x:calc(200px * var(--translate-y-multiplier) * var(--translate-x-multiplier))}.no-gravity.svelte-io58ff .confetti.svelte-io58ff{animation-name:svelte-io58ff-no-gravity-translate;animation-timing-function:ease-out}@media(prefers-reduced-motion){.confetti.svelte-io58ff.svelte-io58ff,.confetti.svelte-io58ff.svelte-io58ff::before{animation:none}}")}function Se(e,t,F){const n=e.slice();return n[18]=t[F],n}function Ee(e){let t,F={length:e[6]},n=[];for(let t=0;t<F.length;t+=1)n[t]=je(Se(e,F,t));return{c(){t=k("div");for(let e=0;e<n.length;e+=1)n[e].c();j(t,"class","confetti-holder svelte-io58ff"),M(t,"rounded",e[9]),M(t,"cone",e[10]),M(t,"no-gravity",e[11])},m(e,F){$(e,t,F);for(let e=0;e<n.length;e+=1)n[e].m(t,null)},p(e,o){if(20991&o){let r;for(F={length:e[6]},r=0;r<F.length;r+=1){const i=Se(e,F,r);n[r]?n[r].p(i,o):(n[r]=je(i),n[r].c(),n[r].m(t,null))}for(;r<n.length;r+=1)n[r].d(1);n.length=F.length}512&o&&M(t,"rounded",e[9]),1024&o&&M(t,"cone",e[10]),2048&o&&M(t,"no-gravity",e[11])},d(e){e&&_(t),function(e,t){for(let F=0;F<e.length;F+=1)e[F]&&e[F].d(t)}(n,e)}}}function je(e){let t;return{c(){t=k("div"),j(t,"class","confetti svelte-io58ff"),T(t,"--fall-distance",e[8]),T(t,"--size",e[0]+"px"),T(t,"--color",e[14]()),T(t,"--skew",Te(-45,45)+"deg,"+Te(-45,45)+"deg"),T(t,"--rotation-xyz",Te(-10,10)+", "+Te(-10,10)+", "+Te(-10,10)),T(t,"--rotation-deg",Te(0,360)+"deg"),T(t,"--translate-y-multiplier",Te(e[2][0],e[2][1])),T(t,"--translate-x-multiplier",Te(e[1][0],e[1][1])),T(t,"--scale",.1*Te(2,10)),T(t,"--transition-duration",e[4]?`calc(${e[3]}ms * var(--scale))`:e[3]+"ms"),T(t,"--transition-delay",Te(e[5][0],e[5][1])+"ms"),T(t,"--transition-iteration-count",e[4]?"infinite":e[7]),T(t,"--x-spread",1-e[12])},m(e,F){$(e,t,F)},p(e,F){256&F&&T(t,"--fall-distance",e[8]),1&F&&T(t,"--size",e[0]+"px"),4&F&&T(t,"--translate-y-multiplier",Te(e[2][0],e[2][1])),2&F&&T(t,"--translate-x-multiplier",Te(e[1][0],e[1][1])),24&F&&T(t,"--transition-duration",e[4]?`calc(${e[3]}ms * var(--scale))`:e[3]+"ms"),32&F&&T(t,"--transition-delay",Te(e[5][0],e[5][1])+"ms"),144&F&&T(t,"--transition-iteration-count",e[4]?"infinite":e[7]),4096&F&&T(t,"--x-spread",1-e[12])},d(e){e&&_(t)}}}function Ae(e){let t,F=!e[13]&&Ee(e);return{c(){F&&F.c(),t=C("")},m(e,n){F&&F.m(e,n),$(e,t,n)},p(e,[n]){e[13]?F&&(F.d(1),F=null):F?F.p(e,n):(F=Ee(e),F.c(),F.m(t.parentNode,t))},i:n,o:n,d(e){F&&F.d(e),e&&_(t)}}}function Te(e,t){return Math.random()*(t-e)+e}function Oe(e,t,F){let{size:n=10}=t,{x:o=[-.5,.5]}=t,{y:r=[.25,1]}=t,{duration:i=2e3}=t,{infinite:a=!1}=t,{delay:l=[0,50]}=t,{colorRange:s=[0,360]}=t,{colorArray:c=[]}=t,{amount:u=50}=t,{iterationCount:d=1}=t,{fallDistance:f="100px"}=t,{rounded:p=!1}=t,{cone:v=!1}=t,{noGravity:m=!1}=t,{xSpread:H=.15}=t,{destroyOnComplete:g=!0}=t,h=!1;return L(()=>{g&&!a&&"infinite"!=d&&setTimeout(()=>F(13,h=!0),(i+l[1])*d)}),e.$$set=e=>{"size"in e&&F(0,n=e.size),"x"in e&&F(1,o=e.x),"y"in e&&F(2,r=e.y),"duration"in e&&F(3,i=e.duration),"infinite"in e&&F(4,a=e.infinite),"delay"in e&&F(5,l=e.delay),"colorRange"in e&&F(15,s=e.colorRange),"colorArray"in e&&F(16,c=e.colorArray),"amount"in e&&F(6,u=e.amount),"iterationCount"in e&&F(7,d=e.iterationCount),"fallDistance"in e&&F(8,f=e.fallDistance),"rounded"in e&&F(9,p=e.rounded),"cone"in e&&F(10,v=e.cone),"noGravity"in e&&F(11,m=e.noGravity),"xSpread"in e&&F(12,H=e.xSpread),"destroyOnComplete"in e&&F(17,g=e.destroyOnComplete)},[n,o,r,i,a,l,u,d,f,p,v,m,H,h,function(){return c.length?c[Math.round(Math.random()*(c.length-1))]:`hsl(${Math.round(Te(s[0],s[1]))}, 75%, 50%`},s,c,g]}var De=class extends ue{constructor(e){super(),ce(this,e,Oe,Ae,c,{size:0,x:1,y:2,duration:3,infinite:4,delay:5,colorRange:15,colorArray:16,amount:6,iterationCount:7,fallDistance:8,rounded:9,cone:10,noGravity:11,xSpread:12,destroyOnComplete:17},Ce)}};const Me={small:["SFFFFFFFFF","FFFFFFFFFF","HFFFFFFFFF","FFHFFFFFFF","HFFFFHFFFF","FFHFFFHFFF","HFFFFHFFFF","FFHFFFFFFF","HFFFFFFFFF","FFFGFFFFFF"],"16x16":["HHFFFFFFFFFFFFHH","HFFFFFFFFFFFFFFH","FFFFFFFFFFFFFFFF","FFFHHHFFFFHHHFFF","FFFHHHFFFFHHHFFF","FFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFF","FFFFFFFFGFFFFFFF","FFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFF","FFFHHHFFFFHHHFFF","FFFHHHHHHHHHHFFF","FFFFHHHHHHHHFFFF","FFFFFFFFFFFFFFFF","HFFFFFFFSFFFFFFH","HHFFFFFFFFFFFFHH"],"32x32":["HHHHHHFFFFFFFFFFFFFFFFFHHHHHHHHH","HHFFFFFFFFFFFFFFFFFFFFFFHHHHHHHH","FFFFSFFFHHFFFFFFFFFFFFFFFFFFFFFH","FFFFFFFFFHFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HHFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HHHHHFFFFFFFFFHHHHHHHHFFFFFFFFFF","HHHHHHHHHHHHHHHHHHHHHHHFFFFFFFFF","HHHHHHHHHHHHHHHHHHHHHHFFFFFFFFFF","HHFFHHHHHHHHHHHHFFFFFFFFFFFFFFFF","HFFFFFFFFFFFFHHHHHFFFFFFFFFFFFFF","HFFFFFFFFFFFFFFHHFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHHHFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHHHFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFHHHHFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFHHHHHF","FFFFFFFFFFFFFFFFFFFFFFFFFFFHHHHH","FFFFFFFFFFFFFFFFFFFFFFFFFFHHHHHH","FFFFFFFFFFFFFFFFFFFFFFFFFHHHHFFH","FFFFFFFFFFFFFFFFFFFFFFFFFFHHFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFGFFFFFFFHFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFHFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHFFHFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HFFFFFFFFFFFFFFFFFFFFFFHFFFFFFFF","HHHHHHHFFFFFFFFFFFFFFFFFFFFFFFFF","HHHHHHHHHHHHFFFFFFFFFFFFFFFFFFFF"]},Pe={H:"#1976d2",S:"#ef9a9a",F:"#e1f5fe",G:"#81c784",T:"#ffe0b2"};const{window:Re}=ie;function Ie(e){z(e,"svelte-6qz89p","canvas.svelte-6qz89p.svelte-6qz89p{padding-bottom:1em;padding-top:1em}.game.svelte-6qz89p.svelte-6qz89p{display:flex;flex-direction:column;align-items:center;justify-content:center;padding-bottom:1.5em}.controls.svelte-6qz89p.svelte-6qz89p{display:flex;flex-direction:column;align-items:center;width:100%;max-width:350px}.status.svelte-6qz89p.svelte-6qz89p{height:1em;width:100%;max-width:300px;text-align:center;transition:color 1s;padding-top:1em}.map.svelte-6qz89p.svelte-6qz89p{display:flex;flex-direction:column;align-items:center}.view.svelte-6qz89p.svelte-6qz89p{display:flex;flex-direction:column;align-items:center}.map.svelte-6qz89p p.svelte-6qz89p{margin:0}.menu.svelte-6qz89p.svelte-6qz89p{display:flex;flex-direction:row;gap:0.2em;overflow:auto;flex-wrap:wrap}.menu.svelte-6qz89p div.svelte-6qz89p{margin:0.3em;display:flex;flex-direction:column}.key.svelte-6qz89p.svelte-6qz89p{background-color:#eee;border-radius:4px;font-size:1em;padding:0.5em 0.5em;border-top:5px solid rgba(255, 255, 255, 0.5);border-left:5px solid rgba(255, 255, 255, 0.5);border-right:5px solid rgba(0, 0, 0, 0.2);border-bottom:5px solid rgba(0, 0, 0, 0.2);color:#555;text-align:center;width:4em;height:4em;cursor:pointer}.legend.svelte-6qz89p.svelte-6qz89p{display:grid;grid-template-columns:1.5em 1fr 1.5em 1fr 1.5em 1fr;width:100%;max-width:300px;gap:0.5em}.legend.svelte-6qz89p div.svelte-6qz89p{display:flex;justify-content:center left}@media(min-width: 1000px){.view.svelte-6qz89p.svelte-6qz89p{flex-direction:row}.legend.svelte-6qz89p.svelte-6qz89p{grid-template-columns:1.5em 1fr;max-width:100px;padding-left:1em}.controls.svelte-6qz89p.svelte-6qz89p{max-width:350px}}@media(min-width: 768px){.game.svelte-6qz89p.svelte-6qz89p{flex-direction:row}.controls.svelte-6qz89p.svelte-6qz89p{flex-direction:column;max-width:300px}.menu.svelte-6qz89p.svelte-6qz89p{flex-direction:column}.menu.svelte-6qz89p div.svelte-6qz89p{flex-direction:row;gap:10px}.key.svelte-6qz89p.svelte-6qz89p{width:3em;height:3em}}.keyboard.svelte-6qz89p.svelte-6qz89p{display:grid;grid-template-columns:auto auto auto;grid-gap:0.5em;padding-top:1em;padding-bottom:1em}.key.svelte-6qz89p.svelte-6qz89p:active{background-color:#ddd}.color.svelte-6qz89p.svelte-6qz89p{width:1.5em;height:1.5em}")}function Le(e){let t,F;return t=new De({props:{cone:!0,delay:[0,200],amount:"50",x:[-.7,.7],y:[.5,1.5]}}),{c(){var e;(e=t.$$.fragment)&&e.c()},m(e,n){le(t,e,n),F=!0},i(e){F||(oe(t.$$.fragment,e),F=!0)},o(e){re(t.$$.fragment,e),F=!1},d(e){se(t,e)}}}function Ge(e){let t;return{c(){t=k("p"),t.textContent="Press the arrow keys to move...",j(t,"class","status svelte-6qz89p")},m(e,F){$(e,t,F)},p:n,d(e){e&&_(t)}}}function Be(e){let t,F;return{c(){t=k("p"),F=C(e[10]),j(t,"class","status svelte-6qz89p"),T(t,"transition","color "+(e[10]?2:0)+"s"),T(t,"transition-timing-function","ease-in"),T(t,"color",e[10]?"white":"black")},m(e,n){$(e,t,n),b(t,F)},p(e,n){1024&n[0]&&A(F,e[10]),1024&n[0]&&T(t,"transition","color "+(e[10]?2:0)+"s"),1024&n[0]&&T(t,"color",e[10]?"white":"black")},d(e){e&&_(t)}}}function Ye(e){let t,F,n,o,r,i,a,s,c,u,d,f,p,v,m,H,g,h,y,x,z,w,q,D,M,P,R,I,L,G,B,Y,N,X,J,K,U,V,W,Z,ee,te,ie,ae,le,se,ce,ue,de,fe,pe,ve,me,He,ge,he,ye,xe,be,ze,we,qe,$e,_e,ke,Ce,Se,Ee,je,Ae,Te,Oe,De,Me,Ie,Ye,Ne=(0==e[13]?e[14].toFixed(2):e[13].toFixed(2))+"",Xe=e[11]&&Le();function Je(e,t){return e[9]?Be:Ge}let Ke=Je(e),Qe=Ke(e);return{c(){t=k("div"),F=k("div"),n=k("div"),o=k("p"),r=C("Score: "),i=C(Ne),a=S(),s=k("canvas"),d=S(),Xe&&Xe.c(),f=S(),p=k("div"),v=k("div"),m=S(),H=k("div"),H.textContent="Safe",g=S(),h=k("div"),y=S(),x=k("div"),x.textContent="Goal",z=S(),w=k("div"),q=S(),D=k("div"),D.textContent="Danger",M=S(),P=k("div"),R=S(),I=k("div"),I.textContent="Start",L=S(),G=k("div"),B=S(),Y=k("div"),Y.textContent="Trigger",N=S(),X=k("div"),Qe.c(),J=S(),K=k("div"),U=k("div"),V=S(),W=k("button"),W.textContent="↑",Z=S(),ee=k("div"),te=S(),ie=k("button"),ie.textContent="←",ae=S(),le=k("button"),le.textContent="↓",se=S(),ce=k("button"),ce.textContent="→",ue=S(),de=k("div"),fe=k("div"),pe=k("label"),pe.textContent="Choose a map:",ve=S(),me=k("select"),He=k("option"),He.textContent="Frozen Lake",ge=k("option"),ge.textContent="Frozen Smiley",he=k("option"),he.textContent="Large Lake",ye=S(),xe=k("div"),be=k("label"),be.textContent="Add a teacher:",ze=S(),we=k("select"),qe=k("option"),qe.textContent="No Teacher",$e=k("option"),$e.textContent="Distance 1",_e=k("option"),_e.textContent="Distance 2",ke=S(),Ce=k("div"),Se=k("label"),Se.textContent="Reset strategy:",Ee=S(),je=k("select"),Ae=k("option"),Ae.textContent="Soft Reset",Te=k("option"),Te.textContent="Back 4",Oe=k("option"),Oe.textContent="Hard Reset",j(o,"class","svelte-6qz89p"),j(s,"width",c=500*e[12]),j(s,"height",u=500*e[12]),T(s,"max-width","300px"),T(s,"width","100%"),T(s,"height","100%"),j(s,"class","svelte-6qz89p"),j(n,"class","map svelte-6qz89p"),j(v,"class","color svelte-6qz89p"),T(v,"background-color",Pe.F),j(H,"class","svelte-6qz89p"),j(h,"class","color svelte-6qz89p"),T(h,"background-color",Pe.G),j(x,"class","svelte-6qz89p"),j(w,"class","color svelte-6qz89p"),T(w,"background-color",Pe.H),j(D,"class","svelte-6qz89p"),j(P,"class","color svelte-6qz89p"),T(P,"background-color",Pe.S),j(I,"class","svelte-6qz89p"),j(G,"class","color svelte-6qz89p"),T(G,"background-color",Pe.T),j(Y,"class","svelte-6qz89p"),j(p,"class","legend svelte-6qz89p"),j(F,"class","view svelte-6qz89p"),j(W,"class","key svelte-6qz89p"),j(ie,"class","key svelte-6qz89p"),j(le,"class","key svelte-6qz89p"),j(ce,"class","key svelte-6qz89p"),j(K,"class","keyboard svelte-6qz89p"),j(pe,"for","map"),He.__value="small",He.value=He.__value,ge.__value="16x16",ge.value=ge.__value,he.__value="32x32",he.value=he.__value,j(me,"name","map"),j(me,"id","map"),void 0===e[1]&&Q(()=>e[24].call(me)),j(fe,"class","svelte-6qz89p"),j(be,"for","teacher"),qe.__value="0",qe.value=qe.__value,$e.__value="1",$e.value=$e.__value,_e.__value="2",_e.value=_e.__value,j(we,"name","teacher"),j(we,"id","teacher"),void 0===e[2]&&Q(()=>e[25].call(we)),j(xe,"class","svelte-6qz89p"),j(Se,"for","reset"),Ae.__value="SR",Ae.value=Ae.__value,Te.__value="B4",Te.value=Te.__value,Oe.__value="HR",Oe.value=Oe.__value,j(je,"name","reset"),j(je,"id","reset"),je.disabled=De=0==e[2],void 0===e[3]&&Q(()=>e[26].call(je)),j(Ce,"class","svelte-6qz89p"),j(de,"class","menu svelte-6qz89p"),j(X,"class","controls svelte-6qz89p"),j(t,"class","game svelte-6qz89p")},m(l,c){$(l,t,c),b(t,F),b(F,n),b(n,o),b(o,r),b(o,i),b(n,a),b(n,s),e[18](s),b(n,d),Xe&&Xe.m(n,null),b(F,f),b(F,p),b(p,v),b(p,m),b(p,H),b(p,g),b(p,h),b(p,y),b(p,x),b(p,z),b(p,w),b(p,q),b(p,D),b(p,M),b(p,P),b(p,R),b(p,I),b(p,L),b(p,G),b(p,B),b(p,Y),b(t,N),b(t,X),Qe.m(X,null),b(X,J),b(X,K),b(K,U),b(K,V),b(K,W),b(K,Z),b(K,ee),b(K,te),b(K,ie),b(K,ae),b(K,le),b(K,se),b(K,ce),b(X,ue),b(X,de),b(de,fe),b(fe,pe),b(fe,ve),b(fe,me),b(me,He),b(me,ge),b(me,he),O(me,e[1]),b(de,ye),b(de,xe),b(xe,be),b(xe,ze),b(xe,we),b(we,qe),b(we,$e),b(we,_e),O(we,e[2]),b(de,ke),b(de,Ce),b(Ce,Se),b(Ce,Ee),b(Ce,je),b(je,Ae),b(je,Te),b(je,Oe),O(je,e[3]),Me=!0,Ie||(Ye=[E(Re,"keydown",e[16]),E(s,"click",e[19]),E(W,"click",e[20]),E(ie,"click",e[21]),E(le,"click",e[22]),E(ce,"click",e[23]),E(me,"change",e[24]),E(me,"change",e[15]),E(we,"change",e[25]),E(je,"change",e[26])],Ie=!0)},p(e,t){(!Me||24576&t[0])&&Ne!==(Ne=(0==e[13]?e[14].toFixed(2):e[13].toFixed(2))+"")&&A(i,Ne),(!Me||4096&t[0]&&c!==(c=500*e[12]))&&j(s,"width",c),(!Me||4096&t[0]&&u!==(u=500*e[12]))&&j(s,"height",u),e[11]?Xe?2048&t[0]&&oe(Xe,1):(Xe=Le(),Xe.c(),oe(Xe,1),Xe.m(n,null)):Xe&&(Fe(),re(Xe,1,1,()=>{Xe=null}),ne()),Ke===(Ke=Je(e))&&Qe?Qe.p(e,t):(Qe.d(1),Qe=Ke(e),Qe&&(Qe.c(),Qe.m(X,J))),2&t[0]&&O(me,e[1]),4&t[0]&&O(we,e[2]),(!Me||4&t[0]&&De!==(De=0==e[2]))&&(je.disabled=De),8&t[0]&&O(je,e[3])},i(e){Me||(oe(Xe),Me=!0)},o(e){re(Xe),Me=!1},d(F){F&&_(t),e[18](null),Xe&&Xe.d(),Qe.d(),Ie=!1,l(Ye)}}}function Ne(e,t,F){let i,a,l,s,c,u=n;e.$$.on_destroy.push(()=>u());var d,f,v,H=!1,g=!1,h=!1,x=!1,b=!0,z=[],w=!1,q="",$=null,_=!1;const k=new Image;k.src="./images/robot.png";const C=new Image;C.src="./images/robot-flipped.png";var S=!1,E=k,j=0,A=0;function T(e){F(10,q=""),clearTimeout($),setTimeout(()=>{F(10,q=e)},1),$=setTimeout(()=>{F(10,q="")},2e3)}L(()=>{const e=a.getContext("2d");var t,n,q,$,O;function D(e){let t=e.length,F=e[0].length,n=new Array(t).fill(!1).map(()=>new Array(F).fill(!1));for(let r=0;r<t;r++)for(let t=0;t<F;t++){var o=!1;try{o|=e[r][t+1]}catch(e){}try{o|=e[r+1][t]}catch(e){}try{o|=e[r][t-1]}catch(e){}try{o|=e[r-1][t]}catch(e){}n[r][t]=o}return n}function M(){n=Me[l],t=a.height/n.length,O=function(e,t){if(0==t)return e;var F=new Array;for(let e=0;e<n.length;e++)F.push(n[e].split(""));let o=F.map(e=>e.map(e=>"H"==e)),r=F.map(e=>e.map(e=>"F"==e));var i,a=Array.from(o);for(let e=0;e<t;e++)i=D(a),a=i.map((e,t)=>e.map((e,F)=>e||a[t][F]));var l=Array.from(F);for(let e=0;e<F.length;e++)for(let t=0;t<F[0].length;t++)i[e][t]&&r[e][t]&&(l[e][t]="T");let s=new Array;for(let t=0;t<e.length;t++)s.push(l[t].join(""));return s}(n,s);for(let F=0;F<n.length;F++)for(let o=0;o<n[0].length;o++){let n=O[F][o];"S"==n&&(q=[o,F]);let r=o*t,i=F*t;e.beginPath(),e.rect(r,i,t+1,t+1),e.fillStyle=Pe[n],e.fill(),e.closePath()}}function P(e){d.set(e),f=e,z.push(f),F(13,j-=.01)}function R(){z=[],F(14,A=j),P(q),F(13,j=0)}F(12,v=window.devicePixelRatio),e.scale(v,v),M(),function l(){(g||H||h||x)&&F(9,w=!0),e.clearRect(0,0,a.width,a.height),M(),b&&(F(8,d=function(e,t={}){const F=qe(e);let n,i=e;function a(a,l){if(null==e)return F.set(e=a),Promise.resolve();i=a;let s=n,c=!1,{delay:u=0,duration:d=400,easing:f=o,interpolate:p=ke}=r(r({},t),l);if(0===d)return s&&(s.abort(),s=null),F.set(e=i),Promise.resolve();const v=m()+u;let H;return n=y(t=>{if(t<v)return!0;c||(H=p(e,a),"function"==typeof d&&(d=d(e,a)),c=!0),s&&(s.abort(),s=null);const n=t-v;return n>d?(F.set(e=a),!1):(F.set(e=H(f(n/d))),!0)}),n.promise}return{set:a,update:(t,F)=>a(t(i,e),F),subscribe:F.subscribe}}(q,{duration:150,easing:$e})),u(),u=p(d,e=>F(35,i=e)),F(13,j=0),R()),async function(){E=S?C:k,e.drawImage(E,i[0]*t,i[1]*t,t,t)}();const s=Math.random();g||H?s<.1?(F(5,g=!1),F(4,H=!1),F(6,h=!0)):s<.2&&(F(5,g=!1),F(4,H=!1),F(7,x=!0)):(h||x)&&(s<.1?(F(6,h=!1),F(7,x=!1),F(5,g=!0)):s<.2&&(F(6,h=!1),F(7,x=!1),F(4,H=!0))),s<.2&&(h||x||g||H)&&T("You just slipped."),g&&(S=!0),H&&(S=!1),$=Array.from(f);let[v,A]=Array.from($);if(H?v<n[0].length-1&&(v+=1):g?v>0&&(v-=1):h?A>0&&(A-=1):x&&A<n.length-1&&(A+=1),(H||g||x||h)&&P([v,A]),"G"==n[A][v])F(11,_=!0),F(13,j+=6),setTimeout(()=>{F(11,_=!1)},3e3),T("You won!"),R();else if("H"==n[A][v])T("You failed."),F(13,j=0),R();else if("T"==O[A][v]){if("HR"==c){let e=j;R(),F(13,j=e)}else if("B4"==c){for(let e=0;e<4&&z.length>1;e++)z.pop();F(13,j+=.01),P(z[z.length-1])}else"SR"==c&&(F(13,j+=.01),P($));T("The teacher set you back.")}b=!1,F(4,H=!1),F(5,g=!1),F(6,h=!1),F(7,x=!1),requestAnimationFrame(l)}()});return[a,l,s,c,H,g,h,x,d,w,q,_,v,j,A,function(){b=!0},function(e){39==e.keyCode||"d"==e.key?(F(4,H=!0),e.preventDefault()):37==e.keyCode||"a"==e.key?(F(5,g=!0),e.preventDefault()):38==e.keyCode||"w"==e.key?(F(6,h=!0),e.preventDefault()):40!=e.keyCode&&"s"!=e.key||(F(7,x=!0),e.preventDefault())},T,function(e){B[e?"unshift":"push"](()=>{a=e,F(0,a)})},()=>T("Press the arrow keys to move..."),()=>F(6,h=!0),()=>F(5,g=!0),()=>F(7,x=!0),()=>F(4,H=!0),function(){l=D(this),F(1,l)},function(){s=D(this),F(2,s)},function(){c=D(this),F(3,c)}]}var Xe=class extends ue{constructor(e){super(),ce(this,e,Ne,Ye,c,{},Ie,[-1,-1])}},Je=document.getElementById("trajectories-visualization");Je.addEventListener("ready",(function(){var e=Je.querySelector("#trajectories-visualization-target");new ve({target:e})}));var Ke=document.getElementById("back-visualization");Ke.addEventListener("ready",(function(){var e=Ke.querySelector("#back-visualization-target");new he({target:e})}));var Qe=document.getElementById("incremental-visualization");Qe.addEventListener("ready",(function(){var e=Qe.querySelector("#incremental-visualization-target");new ze({target:e})}));var Ue=document.getElementById("minigame");Ue.addEventListener("ready",(function(){var e=Ue.querySelector("#minigame-target");new Xe({target:e})}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,