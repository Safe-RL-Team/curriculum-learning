!function(t){var e={};function F(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,F),o.l=!0,o.exports}F.m=t,F.c=e,F.d=function(t,e,n){F.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},F.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},F.t=function(t,e){if(1&e&&(t=F(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(F.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)F.d(n,o,function(e){return t[e]}.bind(null,o));return n},F.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return F.d(e,"a",e),e},F.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},F.p="",F(F.s=0)}([function(t,e,F){"use strict";F.r(e);function n(){}const o=t=>t;function r(t,e){for(const F in e)t[F]=e[F];return t}function i(t){return t()}function a(){return Object.create(null)}function s(t){t.forEach(i)}function l(t){return"function"==typeof t}function c(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}let u;function d(t,e){return u||(u=document.createElement("a")),u.href=e,t===u.href}function f(t){return 0===Object.keys(t).length}function v(t,...e){if(null==t)return n;const F=t.subscribe(...e);return F.unsubscribe?()=>F.unsubscribe():F}const p="undefined"!=typeof window;let m=p?()=>window.performance.now():()=>Date.now(),H=p?t=>requestAnimationFrame(t):n;const g=new Set;function h(t){g.forEach(e=>{e.c(t)||(g.delete(e),e.f())}),0!==g.size&&H(h)}function y(t){let e;return 0===g.size&&H(h),{promise:new Promise(F=>{g.add(e={c:t,f:F})}),abort(){g.delete(e)}}}let x=!1;function b(t,e){t.appendChild(e)}function w(t,e,F){const n=_(t);if(!n.getElementById(e)){const t=S("style");t.id=e,t.textContent=F,$(n,t)}}function _(t){if(!t)return document;const e=t.getRootNode?t.getRootNode():t.ownerDocument;return e&&e.host?e:t.ownerDocument}function $(t,e){b(t.head||t,e)}function k(t,e,F){t.insertBefore(e,F||null)}function C(t){t.parentNode.removeChild(t)}function S(t){return document.createElement(t)}function z(t){return document.createTextNode(t)}function E(){return z(" ")}function A(t,e,F,n){return t.addEventListener(e,F,n),()=>t.removeEventListener(e,F,n)}function j(t,e,F){null==F?t.removeAttribute(e):t.getAttribute(e)!==F&&t.setAttribute(e,F)}function T(t,e){e=""+e,t.wholeText!==e&&(t.data=e)}function O(t,e,F,n){null===F?t.style.removeProperty(e):t.style.setProperty(e,F,n?"important":"")}function M(t,e){for(let F=0;F<t.options.length;F+=1){const n=t.options[F];if(n.__value===e)return void(n.selected=!0)}t.selectedIndex=-1}function P(t){const e=t.querySelector(":checked")||t.options[0];return e&&e.__value}function R(t,e,F){t.classList[F?"add":"remove"](e)}new Map;let D;function I(t){D=t}function L(){if(!D)throw new Error("Function called outside component initialization");return D}function q(t){L().$$.on_mount.push(t)}const B=[],G=[],Y=[],N=[],X=Promise.resolve();let J=!1;function K(){J||(J=!0,X.then(W))}function Q(t){Y.push(t)}const U=new Set;let V=0;function W(){const t=D;do{for(;V<B.length;){const t=B[V];V++,I(t),Z(t.$$)}for(I(null),B.length=0,V=0;G.length;)G.pop()();for(let t=0;t<Y.length;t+=1){const e=Y[t];U.has(e)||(U.add(e),e())}Y.length=0}while(B.length);for(;N.length;)N.pop()();J=!1,U.clear(),I(t)}function Z(t){if(null!==t.fragment){t.update(),s(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(Q)}}const tt=new Set;let et;function Ft(){et={r:0,c:[],p:et}}function nt(){et.r||s(et.c),et=et.p}function ot(t,e){t&&t.i&&(tt.delete(t),t.i(e))}function rt(t,e,F,n){if(t&&t.o){if(tt.has(t))return;tt.add(t),et.c.push(()=>{tt.delete(t),n&&(F&&t.d(1),n())}),t.o(e)}else n&&n()}const it="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let at;function st(t,e,F,n){const{fragment:o,on_mount:r,on_destroy:a,after_update:c}=t.$$;o&&o.m(e,F),n||Q(()=>{const e=r.map(i).filter(l);a?a.push(...e):s(e),t.$$.on_mount=[]}),c.forEach(Q)}function lt(t,e){const F=t.$$;null!==F.fragment&&(s(F.on_destroy),F.fragment&&F.fragment.d(e),F.on_destroy=F.fragment=null,F.ctx=[])}function ct(t,e,F,o,r,i,l,c=[-1]){const u=D;I(t);const d=t.$$={fragment:null,ctx:null,props:i,update:n,not_equal:r,bound:a(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(u?u.$$.context:[])),callbacks:a(),dirty:c,skip_bound:!1,root:e.target||u.$$.root};l&&l(d.root);let f=!1;if(d.ctx=F?F(t,e.props||{},(e,F,...n)=>{const o=n.length?n[0]:F;return d.ctx&&r(d.ctx[e],d.ctx[e]=o)&&(!d.skip_bound&&d.bound[e]&&d.bound[e](o),f&&function(t,e){-1===t.$$.dirty[0]&&(B.push(t),K(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}(t,e)),F}):[],d.update(),f=!0,s(d.before_update),d.fragment=!!o&&o(d.ctx),e.target){if(e.hydrate){x=!0;const t=(v=e.target,Array.from(v.childNodes));d.fragment&&d.fragment.l(t),t.forEach(C)}else d.fragment&&d.fragment.c();e.intro&&ot(t.$$.fragment),st(t,e.target,e.anchor,e.customElement),x=!1,W()}var v;I(u)}"function"==typeof HTMLElement&&(at=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:t}=this.$$;this.$$.on_disconnect=t.map(i).filter(l);for(const t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(t,e,F){this[t]=F}disconnectedCallback(){s(this.$$.on_disconnect)}$destroy(){lt(this,1),this.$destroy=n}$on(t,e){const F=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return F.push(e),()=>{const t=F.indexOf(e);-1!==t&&F.splice(t,1)}}$set(t){this.$$set&&!f(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}});class ut{$destroy(){lt(this,1),this.$destroy=n}$on(t,e){const F=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return F.push(e),()=>{const t=F.indexOf(e);-1!==t&&F.splice(t,1)}}$set(t){this.$$set&&!f(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}function dt(t){let e,F,o,r,i,a,s,l,c,u,f,v,p,m,H,g,h=t[0]+1+"";return{c(){e=S("div"),F=S("img"),r=E(),i=S("div"),a=S("p"),s=z("Trajectory after curriculum step "),l=z(h),c=E(),u=S("input"),f=E(),v=S("p"),p=z("Move the slider to change the step!"),d(F.src,o="images/trajectories"+t[0]+".svg")||j(F,"src",o),j(F,"alt","Interactive plot displaying the trajectories of the RL agent on the map"),j(F,"height","300px"),j(F,"width","400px"),j(u,"type","range"),j(u,"min","0"),j(u,"max",ft),u.value="0",j(v,"style",m="height: 1em; transition: 1s opacity; "+(t[1]&&"opacity: 0;")),O(i,"width","300px"),O(i,"margin","auto"),O(i,"text-align","center"),O(e,"display","flex"),O(e,"flex-direction","column"),O(e,"align-items","center")},m(n,o){k(n,e,o),b(e,F),b(e,r),b(e,i),b(i,a),b(a,s),b(a,l),b(i,c),b(i,u),b(i,f),b(i,v),b(v,p),H||(g=A(u,"input",t[2]),H=!0)},p(t,[e]){1&e&&!d(F.src,o="images/trajectories"+t[0]+".svg")&&j(F,"src",o),1&e&&h!==(h=t[0]+1+"")&&T(l,h),2&e&&m!==(m="height: 1em; transition: 1s opacity; "+(t[1]&&"opacity: 0;"))&&j(v,"style",m)},i:n,o:n,d(t){t&&C(e),H=!1,g()}}}const ft=5;function vt(t,e,F){let n=0,o=!1;return[n,o,function(t){o||F(1,o=!0),F(0,n=parseInt(t.target.value))}]}var pt=class extends ut{constructor(t){super(),ct(this,t,vt,dt,c,{})}};function mt(t){let e,F,o,r,i,a,s,l,c,u,f,v,p,m,H,g;return{c(){e=S("div"),F=S("img"),r=E(),i=S("div"),a=S("p"),s=z("x = "),l=z(t[0]),c=E(),u=S("input"),f=E(),v=S("p"),p=z("Move the slider to change x!"),d(F.src,o="images/16x16_back"+t[0]+"_successes.svg")||j(F,"src",o),j(F,"alt","Interactive plot displaying the success rate of the back curriculum policy over the number of curriculum steps"),j(F,"height","300px"),j(F,"width","400px"),j(u,"type","range"),j(u,"min","1"),j(u,"max",Ht),u.value="0",j(v,"style",m="height: 1em; transition: 1s opacity; "+(t[1]&&"opacity: 0;")),O(i,"width","300px"),O(i,"margin","auto"),O(i,"text-align","center"),O(e,"display","flex"),O(e,"flex-direction","column"),O(e,"align-items","center")},m(n,o){k(n,e,o),b(e,F),b(e,r),b(e,i),b(i,a),b(a,s),b(a,l),b(i,c),b(i,u),b(i,f),b(i,v),b(v,p),H||(g=A(u,"input",t[2]),H=!0)},p(t,[e]){1&e&&!d(F.src,o="images/16x16_back"+t[0]+"_successes.svg")&&j(F,"src",o),1&e&&T(l,t[0]),2&e&&m!==(m="height: 1em; transition: 1s opacity; "+(t[1]&&"opacity: 0;"))&&j(v,"style",m)},i:n,o:n,d(t){t&&C(e),H=!1,g()}}}const Ht=9;function gt(t,e,F){let n=1,o=!1;return[n,o,function(t){o||F(1,o=!0),F(0,n=parseInt(t.target.value))}]}var ht=class extends ut{constructor(t){super(),ct(this,t,gt,mt,c,{})}};function yt(t){let e,F,o,r,i,a,s,l,c,u,f,v,p,m,H,g;return{c(){e=S("div"),F=S("img"),r=E(),i=S("div"),a=S("p"),s=z("x = "),l=z(t[0]),c=E(),u=S("input"),f=E(),v=S("p"),p=z("Move the slider to change x!"),d(F.src,o="images/16x16_incremental"+t[0]+"_successes.svg")||j(F,"src",o),j(F,"alt","Interactive plot displaying the success rate of the incremental curriculum policy over the number of curriculum steps"),j(F,"height","300px"),j(F,"width","400px"),j(u,"type","range"),j(u,"min","0"),j(u,"max",xt),u.value="0",j(v,"style",m="height: 1em; transition: 1s opacity; "+(t[1]&&"opacity: 0;")),O(i,"width","300px"),O(i,"margin","auto"),O(i,"text-align","center"),O(e,"display","flex"),O(e,"flex-direction","column"),O(e,"align-items","center")},m(n,o){k(n,e,o),b(e,F),b(e,r),b(e,i),b(i,a),b(a,s),b(a,l),b(i,c),b(i,u),b(i,f),b(i,v),b(v,p),H||(g=A(u,"input",t[2]),H=!0)},p(t,[e]){1&e&&!d(F.src,o="images/16x16_incremental"+t[0]+"_successes.svg")&&j(F,"src",o),1&e&&T(l,t[0]),2&e&&m!==(m="height: 1em; transition: 1s opacity; "+(t[1]&&"opacity: 0;"))&&j(v,"style",m)},i:n,o:n,d(t){t&&C(e),H=!1,g()}}}const xt=4;function bt(t,e,F){let n=0,o=!1;return[n,o,function(t){o||F(1,o=!0),F(0,n=parseInt(t.target.value))}]}var wt=class extends ut{constructor(t){super(),ct(this,t,bt,yt,c,{})}};const _t=[];function $t(t,e=n){let F;const o=new Set;function r(e){if(c(t,e)&&(t=e,F)){const e=!_t.length;for(const e of o)e[1](),_t.push(e,t);if(e){for(let t=0;t<_t.length;t+=2)_t[t][0](_t[t+1]);_t.length=0}}}return{set:r,update:function(e){r(e(t))},subscribe:function(i,a=n){const s=[i,a];return o.add(s),1===o.size&&(F=e(r)||n),i(t),()=>{o.delete(s),0===o.size&&(F(),F=null)}}}}function kt(t){const e=t-1;return e*e*e+1}function Ct(t){return"[object Date]"===Object.prototype.toString.call(t)}function St(t,e){if(t===e||t!=t)return()=>t;const F=typeof t;if(F!==typeof e||Array.isArray(t)!==Array.isArray(e))throw new Error("Cannot interpolate values of different type");if(Array.isArray(t)){const F=e.map((e,F)=>St(t[F],e));return t=>F.map(e=>e(t))}if("object"===F){if(!t||!e)throw new Error("Object cannot be null");if(Ct(t)&&Ct(e)){t=t.getTime();const F=(e=e.getTime())-t;return e=>new Date(t+e*F)}const F=Object.keys(e),n={};return F.forEach(F=>{n[F]=St(t[F],e[F])}),t=>{const e={};return F.forEach(F=>{e[F]=n[F](t)}),e}}if("number"===F){const F=e-t;return e=>t+e*F}throw new Error(`Cannot interpolate ${F} values`)}function zt(t){w(t,"svelte-io58ff",".confetti-holder.svelte-io58ff.svelte-io58ff{position:relative}@keyframes svelte-io58ff-rotate{0%{transform:skew(var(--skew)) rotate3d(var(--full-rotation))}100%{transform:skew(var(--skew)) rotate3d(var(--rotation-xyz), calc(var(--rotation-deg) + 360deg))}}@keyframes svelte-io58ff-translate{0%{opacity:1}8%{transform:translateY(calc(var(--translate-y) * 0.95)) translateX(calc(var(--translate-x) * (var(--x-spread) * 0.9)));opacity:1}12%{transform:translateY(var(--translate-y)) translateX(calc(var(--translate-x) * (var(--x-spread) * 0.95)));opacity:1}16%{transform:translateY(var(--translate-y)) translateX(calc(var(--translate-x) * var(--x-spread)));opacity:1}100%{transform:translateY(calc(var(--translate-y) + var(--fall-distance))) translateX(var(--translate-x));opacity:0}}@keyframes svelte-io58ff-no-gravity-translate{0%{opacity:1}100%{transform:translateY(var(--translate-y)) translateX(var(--translate-x));opacity:0}}.confetti.svelte-io58ff.svelte-io58ff{--translate-y:calc(-200px * var(--translate-y-multiplier));--translate-x:calc(200px * var(--translate-x-multiplier));position:absolute;height:calc(var(--size) * var(--scale));width:calc(var(--size) * var(--scale));animation:svelte-io58ff-translate var(--transition-duration) var(--transition-delay) var(--transition-iteration-count) linear;opacity:0;pointer-events:none}.confetti.svelte-io58ff.svelte-io58ff::before{--full-rotation:var(--rotation-xyz), var(--rotation-deg);content:'';display:block;width:100%;height:100%;background:var(--color);background-size:contain;transform:skew(var(--skew)) rotate3d(var(--full-rotation));animation:svelte-io58ff-rotate var(--transition-duration) var(--transition-delay) var(--transition-iteration-count) linear}.rounded.svelte-io58ff .confetti.svelte-io58ff::before{border-radius:50%}.cone.svelte-io58ff .confetti.svelte-io58ff{--translate-x:calc(200px * var(--translate-y-multiplier) * var(--translate-x-multiplier))}.no-gravity.svelte-io58ff .confetti.svelte-io58ff{animation-name:svelte-io58ff-no-gravity-translate;animation-timing-function:ease-out}@media(prefers-reduced-motion){.confetti.svelte-io58ff.svelte-io58ff,.confetti.svelte-io58ff.svelte-io58ff::before{animation:none}}")}function Et(t,e,F){const n=t.slice();return n[18]=e[F],n}function At(t){let e,F={length:t[6]},n=[];for(let e=0;e<F.length;e+=1)n[e]=jt(Et(t,F,e));return{c(){e=S("div");for(let t=0;t<n.length;t+=1)n[t].c();j(e,"class","confetti-holder svelte-io58ff"),R(e,"rounded",t[9]),R(e,"cone",t[10]),R(e,"no-gravity",t[11])},m(t,F){k(t,e,F);for(let t=0;t<n.length;t+=1)n[t].m(e,null)},p(t,o){if(20991&o){let r;for(F={length:t[6]},r=0;r<F.length;r+=1){const i=Et(t,F,r);n[r]?n[r].p(i,o):(n[r]=jt(i),n[r].c(),n[r].m(e,null))}for(;r<n.length;r+=1)n[r].d(1);n.length=F.length}512&o&&R(e,"rounded",t[9]),1024&o&&R(e,"cone",t[10]),2048&o&&R(e,"no-gravity",t[11])},d(t){t&&C(e),function(t,e){for(let F=0;F<t.length;F+=1)t[F]&&t[F].d(e)}(n,t)}}}function jt(t){let e;return{c(){e=S("div"),j(e,"class","confetti svelte-io58ff"),O(e,"--fall-distance",t[8]),O(e,"--size",t[0]+"px"),O(e,"--color",t[14]()),O(e,"--skew",Ot(-45,45)+"deg,"+Ot(-45,45)+"deg"),O(e,"--rotation-xyz",Ot(-10,10)+", "+Ot(-10,10)+", "+Ot(-10,10)),O(e,"--rotation-deg",Ot(0,360)+"deg"),O(e,"--translate-y-multiplier",Ot(t[2][0],t[2][1])),O(e,"--translate-x-multiplier",Ot(t[1][0],t[1][1])),O(e,"--scale",.1*Ot(2,10)),O(e,"--transition-duration",t[4]?`calc(${t[3]}ms * var(--scale))`:t[3]+"ms"),O(e,"--transition-delay",Ot(t[5][0],t[5][1])+"ms"),O(e,"--transition-iteration-count",t[4]?"infinite":t[7]),O(e,"--x-spread",1-t[12])},m(t,F){k(t,e,F)},p(t,F){256&F&&O(e,"--fall-distance",t[8]),1&F&&O(e,"--size",t[0]+"px"),4&F&&O(e,"--translate-y-multiplier",Ot(t[2][0],t[2][1])),2&F&&O(e,"--translate-x-multiplier",Ot(t[1][0],t[1][1])),24&F&&O(e,"--transition-duration",t[4]?`calc(${t[3]}ms * var(--scale))`:t[3]+"ms"),32&F&&O(e,"--transition-delay",Ot(t[5][0],t[5][1])+"ms"),144&F&&O(e,"--transition-iteration-count",t[4]?"infinite":t[7]),4096&F&&O(e,"--x-spread",1-t[12])},d(t){t&&C(e)}}}function Tt(t){let e,F=!t[13]&&At(t);return{c(){F&&F.c(),e=z("")},m(t,n){F&&F.m(t,n),k(t,e,n)},p(t,[n]){t[13]?F&&(F.d(1),F=null):F?F.p(t,n):(F=At(t),F.c(),F.m(e.parentNode,e))},i:n,o:n,d(t){F&&F.d(t),t&&C(e)}}}function Ot(t,e){return Math.random()*(e-t)+t}function Mt(t,e,F){let{size:n=10}=e,{x:o=[-.5,.5]}=e,{y:r=[.25,1]}=e,{duration:i=2e3}=e,{infinite:a=!1}=e,{delay:s=[0,50]}=e,{colorRange:l=[0,360]}=e,{colorArray:c=[]}=e,{amount:u=50}=e,{iterationCount:d=1}=e,{fallDistance:f="100px"}=e,{rounded:v=!1}=e,{cone:p=!1}=e,{noGravity:m=!1}=e,{xSpread:H=.15}=e,{destroyOnComplete:g=!0}=e,h=!1;return q(()=>{g&&!a&&"infinite"!=d&&setTimeout(()=>F(13,h=!0),(i+s[1])*d)}),t.$$set=t=>{"size"in t&&F(0,n=t.size),"x"in t&&F(1,o=t.x),"y"in t&&F(2,r=t.y),"duration"in t&&F(3,i=t.duration),"infinite"in t&&F(4,a=t.infinite),"delay"in t&&F(5,s=t.delay),"colorRange"in t&&F(15,l=t.colorRange),"colorArray"in t&&F(16,c=t.colorArray),"amount"in t&&F(6,u=t.amount),"iterationCount"in t&&F(7,d=t.iterationCount),"fallDistance"in t&&F(8,f=t.fallDistance),"rounded"in t&&F(9,v=t.rounded),"cone"in t&&F(10,p=t.cone),"noGravity"in t&&F(11,m=t.noGravity),"xSpread"in t&&F(12,H=t.xSpread),"destroyOnComplete"in t&&F(17,g=t.destroyOnComplete)},[n,o,r,i,a,s,u,d,f,v,p,m,H,h,function(){return c.length?c[Math.round(Math.random()*(c.length-1))]:`hsl(${Math.round(Ot(l[0],l[1]))}, 75%, 50%`},l,c,g]}var Pt=class extends ut{constructor(t){super(),ct(this,t,Mt,Tt,c,{size:0,x:1,y:2,duration:3,infinite:4,delay:5,colorRange:15,colorArray:16,amount:6,iterationCount:7,fallDistance:8,rounded:9,cone:10,noGravity:11,xSpread:12,destroyOnComplete:17},zt)}};const Rt={small:["SFFFFFFFFF","FFFFFFFFFF","HFFFFFFFFF","FFHFFFFFFF","HFFFFHFFFF","FFHFFFHFFF","HFFFFHFFFF","FFHFFFFFFF","HFFFFFFFFF","FFFGFFFFFF"],"16x16":["HHFFFFFFFFFFFFHH","HFFFFFFFFFFFFFFH","FFFFFFFFFFFFFFFF","FFFHHHFFFFHHHFFF","FFFHHHFFFFHHHFFF","FFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFF","FFFFFFFFGFFFFFFF","FFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFF","FFFHHHFFFFHHHFFF","FFFHHHHHHHHHHFFF","FFFFHHHHHHHHFFFF","FFFFFFFFFFFFFFFF","HFFFFFFFSFFFFFFH","HHFFFFFFFFFFFFHH"],"32x32":["HHHHHHFFFFFFFFFFFFFFFFFHHHHHHHHH","HHFFFFFFFFFFFFFFFFFFFFFFHHHHHHHH","FFFFSFFFHHFFFFFFFFFFFFFFFFFFFFFH","FFFFFFFFFHFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HHFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HHHHHFFFFFFFFFHHHHHHHHFFFFFFFFFF","HHHHHHHHHHHHHHHHHHHHHHHFFFFFFFFF","HHHHHHHHHHHHHHHHHHHHHHFFFFFFFFFF","HHFFHHHHHHHHHHHHFFFFFFFFFFFFFFFF","HFFFFFFFFFFFFHHHHHFFFFFFFFFFFFFF","HFFFFFFFFFFFFFFHHFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHHHFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHHHFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFHHHHFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFHHHHHF","FFFFFFFFFFFFFFFFFFFFFFFFFFFHHHHH","FFFFFFFFFFFFFFFFFFFFFFFFFFHHHHHH","FFFFFFFFFFFFFFFFFFFFFFFFFHHHHFFH","FFFFFFFFFFFFFFFFFFFFFFFFFFHHFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFGFFFFFFFHFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFHFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHFFHFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HFFFFFFFFFFFFFFFFFFFFFFHFFFFFFFF","HHHHHHHFFFFFFFFFFFFFFFFFFFFFFFFF","HHHHHHHHHHHHFFFFFFFFFFFFFFFFFFFF"]},Dt={H:"#1976d2",S:"#ef9a9a",F:"#e1f5fe",G:"#81c784",T:"#ffe0b2"};const{window:It}=it;function Lt(t){w(t,"svelte-1t9covs","canvas.svelte-1t9covs.svelte-1t9covs{padding:1em\n  }.game.svelte-1t9covs.svelte-1t9covs{display:flex;flex-direction:column;align-items:center;justify-content:center;padding-bottom:1.5em}.controls.svelte-1t9covs.svelte-1t9covs{display:flex;flex-direction:column;align-items:center}.status.svelte-1t9covs.svelte-1t9covs{height:1em;width:16em;text-align:center;transition:color 1s;padding-top:1em}.map.svelte-1t9covs.svelte-1t9covs{display:flex;flex-direction:column;align-items:center}.map.svelte-1t9covs p.svelte-1t9covs{margin:0}.menu.svelte-1t9covs.svelte-1t9covs{display:flex;flex-direction:row;align-items:center;padding:0.5em}.menu.svelte-1t9covs div.svelte-1t9covs{margin:0.3em;display:flex;flex-direction:column}.key.svelte-1t9covs.svelte-1t9covs{background-color:#eee;border-radius:4px;font-size:1em;padding:0.5em 0.5em;border-top:5px solid rgba(255, 255, 255, 0.5);border-left:5px solid rgba(255, 255, 255, 0.5);border-right:5px solid rgba(0, 0, 0, 0.2);border-bottom:5px solid rgba(0, 0, 0, 0.2);color:#555;text-align:center;width:4em;height:4em;cursor:pointer}@media(min-width: 768px){.game.svelte-1t9covs.svelte-1t9covs{flex-direction:row}.controls.svelte-1t9covs.svelte-1t9covs{flex-direction:column}.menu.svelte-1t9covs.svelte-1t9covs{flex-direction:column}.menu.svelte-1t9covs div.svelte-1t9covs{flex-direction:row;gap:10px}.key.svelte-1t9covs.svelte-1t9covs{width:3em;height:3em}}.keyboard.svelte-1t9covs.svelte-1t9covs{display:grid;grid-template-columns:auto auto auto;grid-gap:0.5em;padding:1em}.key.svelte-1t9covs.svelte-1t9covs:active{background-color:#ddd}")}function qt(t){let e,F;return e=new Pt({props:{cone:!0,delay:[0,200],amount:"50",x:[-.7,.7],y:[.5,1.5]}}),{c(){var t;(t=e.$$.fragment)&&t.c()},m(t,n){st(e,t,n),F=!0},i(t){F||(ot(e.$$.fragment,t),F=!0)},o(t){rt(e.$$.fragment,t),F=!1},d(t){lt(e,t)}}}function Bt(t){let e;return{c(){e=S("p"),e.textContent="Press the arrow keys to move...",j(e,"class","status svelte-1t9covs")},m(t,F){k(t,e,F)},p:n,d(t){t&&C(e)}}}function Gt(t){let e,F;return{c(){e=S("p"),F=z(t[10]),j(e,"class","status svelte-1t9covs"),O(e,"transition","color "+(t[10]?2:0)+"s"),O(e,"transition-timing-function","ease-in"),O(e,"color",t[10]?"white":"black")},m(t,n){k(t,e,n),b(e,F)},p(t,n){1024&n[0]&&T(F,t[10]),1024&n[0]&&O(e,"transition","color "+(t[10]?2:0)+"s"),1024&n[0]&&O(e,"color",t[10]?"white":"black")},d(t){t&&C(e)}}}function Yt(t){let e,F,n,o,r,i,a,l,c,u,f,v,p,m,H,g,h,y,x,w,_,$,P,R,D,I,L,q,B,G,Y,N,X,J,K,U,V,W,Z,tt,et,it,at,st,lt,ct,ut,dt,ft,vt,pt,mt,Ht,gt,ht,yt,xt,bt=(0==t[13]?t[14].toFixed(2):t[13].toFixed(2))+"",wt=t[11]&&qt();function _t(t,e){return t[9]?Gt:Bt}let $t=_t(t),kt=$t(t);return{c(){e=S("div"),F=S("div"),n=S("p"),o=z("Score: "),r=z(bt),i=E(),a=S("canvas"),u=E(),f=S("img"),p=E(),wt&&wt.c(),m=E(),H=S("div"),kt.c(),g=E(),h=S("div"),y=S("div"),x=S("label"),x.textContent="Choose a map:",w=E(),_=S("select"),$=S("option"),$.textContent="Frozen Lake",P=S("option"),P.textContent="Frozen Smiley",R=S("option"),R.textContent="Large Lake",D=E(),I=S("div"),L=S("label"),L.textContent="Add a teacher:",q=E(),B=S("select"),G=S("option"),G.textContent="No Teacher",Y=S("option"),Y.textContent="Distance 1",N=S("option"),N.textContent="Distance 2",X=E(),J=S("div"),K=S("label"),K.textContent="Reset strategy:",U=E(),V=S("select"),W=S("option"),W.textContent="Soft Reset",Z=S("option"),Z.textContent="Back 4",tt=S("option"),tt.textContent="Hard Reset",it=E(),at=S("div"),st=S("div"),lt=E(),ct=S("button"),ct.textContent="↑",ut=E(),dt=S("div"),ft=E(),vt=S("button"),vt.textContent="←",pt=E(),mt=S("button"),mt.textContent="↓",Ht=E(),gt=S("button"),gt.textContent="→",j(n,"class","svelte-1t9covs"),j(a,"width",l=500*t[12]),j(a,"height",c=500*t[12]),O(a,"width","300px"),O(a,"height","300px"),j(a,"class","svelte-1t9covs"),j(f,"width","300"),j(f,"alt","Legend for the above mini-game"),d(f.src,v="./images/map_legend_stacked.svg")||j(f,"src","./images/map_legend_stacked.svg"),j(F,"class","map svelte-1t9covs"),j(x,"for","map"),$.__value="small",$.value=$.__value,P.__value="16x16",P.value=P.__value,R.__value="32x32",R.value=R.__value,j(_,"name","map"),j(_,"id","map"),void 0===t[1]&&Q(()=>t[20].call(_)),j(y,"class","svelte-1t9covs"),j(L,"for","teacher"),G.__value="0",G.value=G.__value,Y.__value="1",Y.value=Y.__value,N.__value="2",N.value=N.__value,j(B,"name","teacher"),j(B,"id","teacher"),void 0===t[2]&&Q(()=>t[21].call(B)),j(I,"class","svelte-1t9covs"),j(K,"for","reset"),W.__value="SR",W.value=W.__value,Z.__value="B4",Z.value=Z.__value,tt.__value="HR",tt.value=tt.__value,j(V,"name","reset"),j(V,"id","reset"),V.disabled=et=0==t[2],void 0===t[3]&&Q(()=>t[22].call(V)),j(J,"class","svelte-1t9covs"),j(h,"class","menu svelte-1t9covs"),j(ct,"class","key svelte-1t9covs"),j(vt,"class","key svelte-1t9covs"),j(mt,"class","key svelte-1t9covs"),j(gt,"class","key svelte-1t9covs"),j(at,"class","keyboard svelte-1t9covs"),j(H,"class","controls svelte-1t9covs"),j(e,"class","game svelte-1t9covs")},m(s,l){k(s,e,l),b(e,F),b(F,n),b(n,o),b(n,r),b(F,i),b(F,a),t[18](a),b(F,u),b(F,f),b(F,p),wt&&wt.m(F,null),b(e,m),b(e,H),kt.m(H,null),b(H,g),b(H,h),b(h,y),b(y,x),b(y,w),b(y,_),b(_,$),b(_,P),b(_,R),M(_,t[1]),b(h,D),b(h,I),b(I,L),b(I,q),b(I,B),b(B,G),b(B,Y),b(B,N),M(B,t[2]),b(h,X),b(h,J),b(J,K),b(J,U),b(J,V),b(V,W),b(V,Z),b(V,tt),M(V,t[3]),b(H,it),b(H,at),b(at,st),b(at,lt),b(at,ct),b(at,ut),b(at,dt),b(at,ft),b(at,vt),b(at,pt),b(at,mt),b(at,Ht),b(at,gt),ht=!0,yt||(xt=[A(It,"keydown",t[16]),A(a,"click",t[19]),A(_,"change",t[20]),A(_,"change",t[15]),A(B,"change",t[21]),A(V,"change",t[22]),A(ct,"click",t[23]),A(vt,"click",t[24]),A(mt,"click",t[25]),A(gt,"click",t[26])],yt=!0)},p(t,e){(!ht||24576&e[0])&&bt!==(bt=(0==t[13]?t[14].toFixed(2):t[13].toFixed(2))+"")&&T(r,bt),(!ht||4096&e[0]&&l!==(l=500*t[12]))&&j(a,"width",l),(!ht||4096&e[0]&&c!==(c=500*t[12]))&&j(a,"height",c),t[11]?wt?2048&e[0]&&ot(wt,1):(wt=qt(),wt.c(),ot(wt,1),wt.m(F,null)):wt&&(Ft(),rt(wt,1,1,()=>{wt=null}),nt()),$t===($t=_t(t))&&kt?kt.p(t,e):(kt.d(1),kt=$t(t),kt&&(kt.c(),kt.m(H,g))),2&e[0]&&M(_,t[1]),4&e[0]&&M(B,t[2]),(!ht||4&e[0]&&et!==(et=0==t[2]))&&(V.disabled=et),8&e[0]&&M(V,t[3])},i(t){ht||(ot(wt),ht=!0)},o(t){rt(wt),ht=!1},d(F){F&&C(e),t[18](null),wt&&wt.d(),kt.d(),yt=!1,s(xt)}}}function Nt(t,e,F){let i,a,s,l,c,u=n;t.$$.on_destroy.push(()=>u());var d,f,p,H=!1,g=!1,h=!1,x=!1,b=!0,w=[],_=!1,$="",k=null,C=!1;const S=new Image;S.src="./images/robot.png";const z=new Image;z.src="./images/robot-flipped.png";var E=!1,A=S,j=0,T=0;function O(t){F(10,$=""),clearTimeout(k),setTimeout(()=>{F(10,$=t)},1),k=setTimeout(()=>{F(10,$="")},2e3)}q(()=>{const t=a.getContext("2d");var e,n,$,k,M;function P(t){let e=t.length,F=t[0].length,n=new Array(e).fill(!1).map(()=>new Array(F).fill(!1));for(let r=0;r<e;r++)for(let e=0;e<F;e++){var o=!1;try{o|=t[r][e+1]}catch(t){}try{o|=t[r+1][e]}catch(t){}try{o|=t[r][e-1]}catch(t){}try{o|=t[r-1][e]}catch(t){}n[r][e]=o}return n}function R(){n=Rt[s],e=a.height/n.length,M=function(t,e){if(0==e)return t;var F=new Array;for(let t=0;t<n.length;t++)F.push(n[t].split(""));let o=F.map(t=>t.map(t=>"H"==t)),r=F.map(t=>t.map(t=>"F"==t));var i,a=Array.from(o);for(let t=0;t<e;t++)i=P(a),a=i.map((t,e)=>t.map((t,F)=>t||a[e][F]));var s=Array.from(F);for(let t=0;t<F.length;t++)for(let e=0;e<F[0].length;e++)i[t][e]&&r[t][e]&&(s[t][e]="T");let l=new Array;for(let e=0;e<t.length;e++)l.push(s[e].join(""));return l}(n,l);for(let F=0;F<n.length;F++)for(let o=0;o<n[0].length;o++){let n=M[F][o];"S"==n&&($=[o,F]);let r=o*e,i=F*e;t.beginPath(),t.rect(r,i,e+1,e+1),t.fillStyle=Dt[n],t.fill(),t.closePath()}}function D(t){d.set(t),f=t,w.push(f),F(13,j-=.01)}function I(){w=[],F(14,T=j),D($),F(13,j=0)}F(12,p=window.devicePixelRatio),t.scale(p,p),R(),function s(){(g||H||h||x)&&F(9,_=!0),t.clearRect(0,0,a.width,a.height),R(),b&&(F(8,d=function(t,e={}){const F=$t(t);let n,i=t;function a(a,s){if(null==t)return F.set(t=a),Promise.resolve();i=a;let l=n,c=!1,{delay:u=0,duration:d=400,easing:f=o,interpolate:v=St}=r(r({},e),s);if(0===d)return l&&(l.abort(),l=null),F.set(t=i),Promise.resolve();const p=m()+u;let H;return n=y(e=>{if(e<p)return!0;c||(H=v(t,a),"function"==typeof d&&(d=d(t,a)),c=!0),l&&(l.abort(),l=null);const n=e-p;return n>d?(F.set(t=a),!1):(F.set(t=H(f(n/d))),!0)}),n.promise}return{set:a,update:(e,F)=>a(e(i,t),F),subscribe:F.subscribe}}($,{duration:150,easing:kt})),u(),u=v(d,t=>F(35,i=t)),F(13,j=0),I()),async function(){A=E?z:S,t.drawImage(A,i[0]*e,i[1]*e,e,e)}();const l=Math.random();g||H?l<.1?(F(5,g=!1),F(4,H=!1),F(6,h=!0)):l<.2&&(F(5,g=!1),F(4,H=!1),F(7,x=!0)):(h||x)&&(l<.1?(F(6,h=!1),F(7,x=!1),F(5,g=!0)):l<.2&&(F(6,h=!1),F(7,x=!1),F(4,H=!0))),l<.2&&(h||x||g||H)&&O("You just slipped."),g&&(E=!0),H&&(E=!1),k=Array.from(f);let[p,T]=Array.from(k);if(H?p<n[0].length-1&&(p+=1):g?p>0&&(p-=1):h?T>0&&(T-=1):x&&T<n.length-1&&(T+=1),(H||g||x||h)&&D([p,T]),"G"==n[T][p])F(11,C=!0),F(13,j+=6),setTimeout(()=>{F(11,C=!1)},3e3),O("You won!"),I();else if("H"==n[T][p])O("You failed."),F(13,j=0),I();else if("T"==M[T][p]){if("HR"==c){let t=j;I(),F(13,j=t)}else if("B4"==c){for(let t=0;t<4&&w.length>1;t++)w.pop();F(13,j+=.01),D(w[w.length-1])}else"SR"==c&&(F(13,j+=.01),D(k));O("The teacher set you back.")}b=!1,F(4,H=!1),F(5,g=!1),F(6,h=!1),F(7,x=!1),requestAnimationFrame(s)}()});return[a,s,l,c,H,g,h,x,d,_,$,C,p,j,T,function(){b=!0},function(t){39==t.keyCode||"d"==t.key?(F(4,H=!0),t.preventDefault()):37==t.keyCode||"a"==t.key?(F(5,g=!0),t.preventDefault()):38==t.keyCode||"w"==t.key?(F(6,h=!0),t.preventDefault()):40!=t.keyCode&&"s"!=t.key||(F(7,x=!0),t.preventDefault())},O,function(t){G[t?"unshift":"push"](()=>{a=t,F(0,a)})},()=>O("Press the arrow keys to move..."),function(){s=P(this),F(1,s)},function(){l=P(this),F(2,l)},function(){c=P(this),F(3,c)},()=>F(6,h=!0),()=>F(5,g=!0),()=>F(7,x=!0),()=>F(4,H=!0)]}var Xt=class extends ut{constructor(t){super(),ct(this,t,Nt,Yt,c,{},Lt,[-1,-1])}},Jt=document.getElementById("trajectories-visualization");Jt.addEventListener("ready",(function(){var t=Jt.querySelector("#trajectories-visualization-target");new pt({target:t})}));var Kt=document.getElementById("back-visualization");Kt.addEventListener("ready",(function(){var t=Kt.querySelector("#back-visualization-target");new ht({target:t})}));var Qt=document.getElementById("incremental-visualization");Qt.addEventListener("ready",(function(){var t=Qt.querySelector("#incremental-visualization-target");new wt({target:t})}));var Ut=document.getElementById("grid-visualization");Ut.addEventListener("ready",(function(){var t=Ut.querySelector("#grid-visualization-target");new Xt({target:t})}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,