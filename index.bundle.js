!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);function o(){}function r(t){return t()}function c(){return Object.create(null)}function i(t){t.forEach(r)}function u(t){return"function"==typeof t}function s(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}let a;function l(t,e){return a||(a=document.createElement("a")),a.href=e,t===a.href}function d(t){return 0===Object.keys(t).length}new Set;let f=!1;function p(t,e){t.appendChild(e)}function $(t){if(!t)return document;const e=t.getRootNode?t.getRootNode():t.ownerDocument;return e&&e.host?e:t.ownerDocument}function h(t,e){p(t.head||t,e)}function m(t,e,n){t.insertBefore(e,n||null)}function g(t){t.parentNode.removeChild(t)}function y(t){return document.createElement(t)}function b(t){return document.createTextNode(t)}function v(){return b(" ")}function x(t,e,n,o){return t.addEventListener(e,n,o),()=>t.removeEventListener(e,n,o)}function _(t,e,n){null==n?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}function w(t,e){e=""+e,t.wholeText!==e&&(t.data=e)}new Map;let k;function E(t){k=t}const j=[],O=[],S=[],C=[],T=Promise.resolve();let M=!1;function L(){M||(M=!0,T.then(z))}function N(t){S.push(t)}const P=new Set;let q=0;function z(){const t=k;do{for(;q<j.length;){const t=j[q];q++,E(t),A(t.$$)}for(E(null),j.length=0,q=0;O.length;)O.pop()();for(let t=0;t<S.length;t+=1){const e=S[t];P.has(e)||(P.add(e),e())}S.length=0}while(j.length);for(;C.length;)C.pop()();M=!1,P.clear(),E(t)}function A(t){if(null!==t.fragment){t.update(),i(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(N)}}const B=new Set;function I(t,e){t&&t.i&&(B.delete(t),t.i(e))}"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let D;function R(t,e){const n=t.$$;null!==n.fragment&&(i(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function H(t,e,n,s,a,l,d,p=[-1]){const $=k;E(t);const h=t.$$={fragment:null,ctx:null,props:l,update:o,not_equal:a,bound:c(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||($?$.$$.context:[])),callbacks:c(),dirty:p,skip_bound:!1,root:e.target||$.$$.root};d&&d(h.root);let m=!1;if(h.ctx=n?n(t,e.props||{},(e,n,...o)=>{const r=o.length?o[0]:n;return h.ctx&&a(h.ctx[e],h.ctx[e]=r)&&(!h.skip_bound&&h.bound[e]&&h.bound[e](r),m&&function(t,e){-1===t.$$.dirty[0]&&(j.push(t),L(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}(t,e)),n}):[],h.update(),m=!0,i(h.before_update),h.fragment=!!s&&s(h.ctx),e.target){if(e.hydrate){f=!0;const t=(y=e.target,Array.from(y.childNodes));h.fragment&&h.fragment.l(t),t.forEach(g)}else h.fragment&&h.fragment.c();e.intro&&I(t.$$.fragment),function(t,e,n,o){const{fragment:c,on_mount:s,on_destroy:a,after_update:l}=t.$$;c&&c.m(e,n),o||N(()=>{const e=s.map(r).filter(u);a?a.push(...e):i(e),t.$$.on_mount=[]}),l.forEach(N)}(t,e.target,e.anchor,e.customElement),f=!1,z()}var y;E($)}"function"==typeof HTMLElement&&(D=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:t}=this.$$;this.$$.on_disconnect=t.map(r).filter(u);for(const t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(t,e,n){this[t]=n}disconnectedCallback(){i(this.$$.on_disconnect)}$destroy(){R(this,1),this.$destroy=o}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){this.$$set&&!d(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}});class F{$destroy(){R(this,1),this.$destroy=o}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){this.$$set&&!d(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}function G(t){!function(t,e,n){const o=$(t);if(!o.getElementById(e)){const t=y("style");t.id=e,t.textContent=n,h(o,t)}}(t,"svelte-10zy88m","p.svelte-10zy88m{margin:0}")}function J(t){let e,n,r,c,u,s,a,l,d,f,$,h,k,E,j,O,S,C;return{c(){e=y("p"),n=y("span"),r=b(t[0]),c=b(" * 2 = "),u=b(t[1]),s=b("\n  , and\n  "),a=y("span"),l=b(t[1]),d=b(" * 2 = "),f=b(t[2]),$=v(),h=y("button"),k=b("Increment counter: "),E=b(t[0]),j=v(),O=y("button"),O.textContent="Reset",_(e,"class","svelte-10zy88m")},m(o,i){m(o,e,i),p(e,n),p(n,r),p(n,c),p(n,u),p(e,s),p(e,a),p(a,l),p(a,d),p(a,f),m(o,$,i),m(o,h,i),p(h,k),p(h,E),m(o,j,i),m(o,O,i),S||(C=[x(h,"click",t[3]),x(O,"click",t[4])],S=!0)},p(t,[e]){1&e&&w(r,t[0]),2&e&&w(u,t[1]),2&e&&w(l,t[1]),4&e&&w(f,t[2]),1&e&&w(E,t[0])},i:o,o:o,d(t){t&&g(e),t&&g($),t&&g(h),t&&g(j),t&&g(O),S=!1,i(C)}}}function K(t,e,n){let o,r,c=1;return t.$$.update=()=>{1&t.$$.dirty&&n(1,o=2*c),2&t.$$.dirty&&n(2,r=2*o)},[c,o,r,function(){n(0,c+=1),console.log("inc count")},function(){n(0,c=1)}]}var Q=class extends F{constructor(t){super(),H(this,t,K,J,s,{},G)}};function U(t){let e,n,r,c,i,u,s,a,d,f=t[0]+1+"";return{c(){e=b("Trajectory "),n=b(f),r=v(),c=y("button"),c.textContent="Next",i=v(),u=y("img"),l(u.src,s="images/trajectories"+t[0]+".svg")||_(u,"src",s),_(u,"alt","TODO"),_(u,"height","300px"),_(u,"width","300px")},m(o,s){m(o,e,s),m(o,n,s),m(o,r,s),m(o,c,s),m(o,i,s),m(o,u,s),a||(d=x(c,"click",t[1]),a=!0)},p(t,[e]){1&e&&f!==(f=t[0]+1+"")&&w(n,f),1&e&&!l(u.src,s="images/trajectories"+t[0]+".svg")&&_(u,"src",s)},i:o,o:o,d(t){t&&g(e),t&&g(n),t&&g(r),t&&g(c),t&&g(i),t&&g(u),a=!1,d()}}}function V(t,e,n){let o,r,c=0;return t.$$.update=()=>{1&t.$$.dirty&&n(2,o=2*c),4&t.$$.dirty&&(r=2*o)},[c,function(){n(0,c+=1),n(0,c%=5)},o]}var W=class extends F{constructor(t){super(),H(this,t,V,U,s,{})}},X=document.getElementById("svelte-example-dfigure");X.addEventListener("ready",(function(){var t=X.querySelector("#svelte-example-target");new Q({target:t})}));var Y=document.getElementById("trajectories-visualization");Y.addEventListener("ready",(function(){var t=Y.querySelector("#trajectories-visualization-target");new W({target:t})}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,