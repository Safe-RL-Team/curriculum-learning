!function(e){var t={};function F(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,F),o.l=!0,o.exports}F.m=e,F.c=t,F.d=function(e,t,n){F.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},F.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},F.t=function(e,t){if(1&t&&(e=F(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(F.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)F.d(n,o,function(t){return e[t]}.bind(null,o));return n},F.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return F.d(t,"a",t),t},F.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},F.p="",F(F.s=0)}([function(e,t,F){"use strict";F.r(t);function n(){}const o=e=>e;function r(e,t){for(const F in t)e[F]=t[F];return e}function i(e){return e()}function a(){return Object.create(null)}function l(e){e.forEach(i)}function s(e){return"function"==typeof e}function c(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e}let u;function f(e,t){return u||(u=document.createElement("a")),u.href=t,e===u.href}function d(e){return 0===Object.keys(e).length}function m(e,...t){if(null==e)return n;const F=e.subscribe(...t);return F.unsubscribe?()=>F.unsubscribe():F}const p="undefined"!=typeof window;let v=p?()=>window.performance.now():()=>Date.now(),H=p?e=>requestAnimationFrame(e):n;const y=new Set;function g(e){y.forEach(t=>{t.c(e)||(y.delete(t),t.f())}),0!==y.size&&H(g)}function h(e){let t;return 0===y.size&&H(g),{promise:new Promise(F=>{y.add(t={c:e,f:F})}),abort(){y.delete(t)}}}let x=!1;function b(e,t){e.appendChild(t)}function w(e,t,F){const n=_(e);if(!n.getElementById(t)){const e=q("style");e.id=t,e.textContent=F,$(n,e)}}function _(e){if(!e)return document;const t=e.getRootNode?e.getRootNode():e.ownerDocument;return t&&t.host?t:e.ownerDocument}function $(e,t){b(e.head||e,t)}function z(e,t,F){e.insertBefore(t,F||null)}function k(e){e.parentNode.removeChild(e)}function q(e){return document.createElement(e)}function C(e){return document.createTextNode(e)}function S(){return C(" ")}function E(e,t,F,n){return e.addEventListener(t,F,n),()=>e.removeEventListener(t,F,n)}function O(e,t,F){null==F?e.removeAttribute(t):e.getAttribute(t)!==F&&e.setAttribute(t,F)}function T(e,t){t=""+t,e.wholeText!==t&&(e.data=t)}function A(e,t,F,n){null===F?e.style.removeProperty(t):e.style.setProperty(t,F,n?"important":"")}function j(e,t){for(let F=0;F<e.options.length;F+=1){const n=e.options[F];if(n.__value===t)return void(n.selected=!0)}e.selectedIndex=-1}function D(e){const t=e.querySelector(":checked")||e.options[0];return t&&t.__value}function P(e,t,F){e.classList[F?"add":"remove"](t)}new Map;let R;function M(e){R=e}function I(){if(!R)throw new Error("Function called outside component initialization");return R}function L(e){I().$$.on_mount.push(e)}const B=[],G=[],Y=[],N=[],X=Promise.resolve();let J=!1;function K(){J||(J=!0,X.then(W))}function Q(e){Y.push(e)}const U=new Set;let V=0;function W(){const e=R;do{for(;V<B.length;){const e=B[V];V++,M(e),Z(e.$$)}for(M(null),B.length=0,V=0;G.length;)G.pop()();for(let e=0;e<Y.length;e+=1){const t=Y[e];U.has(t)||(U.add(t),t())}Y.length=0}while(B.length);for(;N.length;)N.pop()();J=!1,U.clear(),M(e)}function Z(e){if(null!==e.fragment){e.update(),l(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(Q)}}const ee=new Set;let te;function Fe(){te={r:0,c:[],p:te}}function ne(){te.r||l(te.c),te=te.p}function oe(e,t){e&&e.i&&(ee.delete(e),e.i(t))}function re(e,t,F,n){if(e&&e.o){if(ee.has(e))return;ee.add(e),te.c.push(()=>{ee.delete(e),n&&(F&&e.d(1),n())}),e.o(t)}else n&&n()}const ie="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let ae;function le(e,t,F,n){const{fragment:o,on_mount:r,on_destroy:a,after_update:c}=e.$$;o&&o.m(t,F),n||Q(()=>{const t=r.map(i).filter(s);a?a.push(...t):l(t),e.$$.on_mount=[]}),c.forEach(Q)}function se(e,t){const F=e.$$;null!==F.fragment&&(l(F.on_destroy),F.fragment&&F.fragment.d(t),F.on_destroy=F.fragment=null,F.ctx=[])}function ce(e,t,F,o,r,i,s,c=[-1]){const u=R;M(e);const f=e.$$={fragment:null,ctx:null,props:i,update:n,not_equal:r,bound:a(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(t.context||(u?u.$$.context:[])),callbacks:a(),dirty:c,skip_bound:!1,root:t.target||u.$$.root};s&&s(f.root);let d=!1;if(f.ctx=F?F(e,t.props||{},(t,F,...n)=>{const o=n.length?n[0]:F;return f.ctx&&r(f.ctx[t],f.ctx[t]=o)&&(!f.skip_bound&&f.bound[t]&&f.bound[t](o),d&&function(e,t){-1===e.$$.dirty[0]&&(B.push(e),K(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(e,t)),F}):[],f.update(),d=!0,l(f.before_update),f.fragment=!!o&&o(f.ctx),t.target){if(t.hydrate){x=!0;const e=(m=t.target,Array.from(m.childNodes));f.fragment&&f.fragment.l(e),e.forEach(k)}else f.fragment&&f.fragment.c();t.intro&&oe(e.$$.fragment),le(e,t.target,t.anchor,t.customElement),x=!1,W()}var m;M(u)}"function"==typeof HTMLElement&&(ae=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:e}=this.$$;this.$$.on_disconnect=e.map(i).filter(s);for(const e in this.$$.slotted)this.appendChild(this.$$.slotted[e])}attributeChangedCallback(e,t,F){this[e]=F}disconnectedCallback(){l(this.$$.on_disconnect)}$destroy(){se(this,1),this.$destroy=n}$on(e,t){const F=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return F.push(t),()=>{const e=F.indexOf(t);-1!==e&&F.splice(e,1)}}$set(e){this.$$set&&!d(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}});class ue{$destroy(){se(this,1),this.$destroy=n}$on(e,t){const F=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return F.push(t),()=>{const e=F.indexOf(t);-1!==e&&F.splice(e,1)}}$set(e){this.$$set&&!d(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}function fe(e){let t,F,o,r,i,a,l,s,c,u,d,m=e[0]+1+"";return{c(){t=q("img"),o=S(),r=q("div"),i=q("p"),a=C("Trajectory after curriculum step "),l=C(m),s=S(),c=q("input"),f(t.src,F="images/trajectories"+e[0]+".svg")||O(t,"src",F),O(t,"alt","TODO"),O(t,"height","300px"),O(t,"width","300px"),O(c,"type","range"),O(c,"min","0"),O(c,"max",de),c.value="0",A(r,"width","300px"),A(r,"margin","auto"),A(r,"text-align","center")},m(F,n){z(F,t,n),z(F,o,n),z(F,r,n),b(r,i),b(i,a),b(i,l),b(r,s),b(r,c),u||(d=E(c,"input",e[1]),u=!0)},p(e,[n]){1&n&&!f(t.src,F="images/trajectories"+e[0]+".svg")&&O(t,"src",F),1&n&&m!==(m=e[0]+1+"")&&T(l,m)},i:n,o:n,d(e){e&&k(t),e&&k(o),e&&k(r),u=!1,d()}}}const de=5;function me(e,t,F){let n=0;return[n,function(e){console.log(e.target.value),F(0,n=parseInt(e.target.value))}]}var pe=class extends ue{constructor(e){super(),ce(this,e,me,fe,c,{})}};function ve(e){let t,F,o,r,i,a,l,s,c,u,d,m;return{c(){t=q("div"),F=q("img"),r=S(),i=q("div"),a=q("p"),l=C("x = "),s=C(e[0]),c=S(),u=q("input"),f(F.src,o="images/16x16_back"+e[0]+"_successes.svg")||O(F,"src",o),O(F,"alt","TODO"),O(F,"height","300px"),O(F,"width","400px"),O(u,"type","range"),O(u,"min","1"),O(u,"max",He),u.value="0",A(i,"width","300px"),A(i,"margin","auto"),A(i,"text-align","center"),A(t,"display","flex"),A(t,"flex-direction","column"),A(t,"align-items","center")},m(n,o){z(n,t,o),b(t,F),b(t,r),b(t,i),b(i,a),b(a,l),b(a,s),b(i,c),b(i,u),d||(m=E(u,"input",e[1]),d=!0)},p(e,[t]){1&t&&!f(F.src,o="images/16x16_back"+e[0]+"_successes.svg")&&O(F,"src",o),1&t&&T(s,e[0])},i:n,o:n,d(e){e&&k(t),d=!1,m()}}}const He=9;function ye(e,t,F){let n=1;return[n,function(e){console.log(e.target.value),F(0,n=parseInt(e.target.value))}]}var ge=class extends ue{constructor(e){super(),ce(this,e,ye,ve,c,{})}};function he(e){let t,F,o,r,i,a,l,s,c,u,d,m;return{c(){t=q("div"),F=q("img"),r=S(),i=q("div"),a=q("p"),l=C("x = "),s=C(e[0]),c=S(),u=q("input"),f(F.src,o="images/16x16_incremental"+e[0]+"_successes.svg")||O(F,"src",o),O(F,"alt","TODO"),O(F,"height","300px"),O(F,"width","400px"),O(u,"type","range"),O(u,"min","0"),O(u,"max",xe),u.value="0",A(i,"width","300px"),A(i,"margin","auto"),A(i,"text-align","center"),A(t,"display","flex"),A(t,"flex-direction","column"),A(t,"align-items","center")},m(n,o){z(n,t,o),b(t,F),b(t,r),b(t,i),b(i,a),b(a,l),b(a,s),b(i,c),b(i,u),d||(m=E(u,"input",e[1]),d=!0)},p(e,[t]){1&t&&!f(F.src,o="images/16x16_incremental"+e[0]+"_successes.svg")&&O(F,"src",o),1&t&&T(s,e[0])},i:n,o:n,d(e){e&&k(t),d=!1,m()}}}const xe=4;function be(e,t,F){let n=0;return[n,function(e){console.log(e.target.value),F(0,n=parseInt(e.target.value))}]}var we=class extends ue{constructor(e){super(),ce(this,e,be,he,c,{})}};const _e=[];function $e(e,t=n){let F;const o=new Set;function r(t){if(c(e,t)&&(e=t,F)){const t=!_e.length;for(const t of o)t[1](),_e.push(t,e);if(t){for(let e=0;e<_e.length;e+=2)_e[e][0](_e[e+1]);_e.length=0}}}return{set:r,update:function(t){r(t(e))},subscribe:function(i,a=n){const l=[i,a];return o.add(l),1===o.size&&(F=t(r)||n),i(e),()=>{o.delete(l),0===o.size&&(F(),F=null)}}}}function ze(e){const t=e-1;return t*t*t+1}function ke(e){return"[object Date]"===Object.prototype.toString.call(e)}function qe(e,t){if(e===t||e!=e)return()=>e;const F=typeof e;if(F!==typeof t||Array.isArray(e)!==Array.isArray(t))throw new Error("Cannot interpolate values of different type");if(Array.isArray(e)){const F=t.map((t,F)=>qe(e[F],t));return e=>F.map(t=>t(e))}if("object"===F){if(!e||!t)throw new Error("Object cannot be null");if(ke(e)&&ke(t)){e=e.getTime();const F=(t=t.getTime())-e;return t=>new Date(e+t*F)}const F=Object.keys(t),n={};return F.forEach(F=>{n[F]=qe(e[F],t[F])}),e=>{const t={};return F.forEach(F=>{t[F]=n[F](e)}),t}}if("number"===F){const F=t-e;return t=>e+t*F}throw new Error(`Cannot interpolate ${F} values`)}function Ce(e){w(e,"svelte-io58ff",".confetti-holder.svelte-io58ff.svelte-io58ff{position:relative}@keyframes svelte-io58ff-rotate{0%{transform:skew(var(--skew)) rotate3d(var(--full-rotation))}100%{transform:skew(var(--skew)) rotate3d(var(--rotation-xyz), calc(var(--rotation-deg) + 360deg))}}@keyframes svelte-io58ff-translate{0%{opacity:1}8%{transform:translateY(calc(var(--translate-y) * 0.95)) translateX(calc(var(--translate-x) * (var(--x-spread) * 0.9)));opacity:1}12%{transform:translateY(var(--translate-y)) translateX(calc(var(--translate-x) * (var(--x-spread) * 0.95)));opacity:1}16%{transform:translateY(var(--translate-y)) translateX(calc(var(--translate-x) * var(--x-spread)));opacity:1}100%{transform:translateY(calc(var(--translate-y) + var(--fall-distance))) translateX(var(--translate-x));opacity:0}}@keyframes svelte-io58ff-no-gravity-translate{0%{opacity:1}100%{transform:translateY(var(--translate-y)) translateX(var(--translate-x));opacity:0}}.confetti.svelte-io58ff.svelte-io58ff{--translate-y:calc(-200px * var(--translate-y-multiplier));--translate-x:calc(200px * var(--translate-x-multiplier));position:absolute;height:calc(var(--size) * var(--scale));width:calc(var(--size) * var(--scale));animation:svelte-io58ff-translate var(--transition-duration) var(--transition-delay) var(--transition-iteration-count) linear;opacity:0;pointer-events:none}.confetti.svelte-io58ff.svelte-io58ff::before{--full-rotation:var(--rotation-xyz), var(--rotation-deg);content:'';display:block;width:100%;height:100%;background:var(--color);background-size:contain;transform:skew(var(--skew)) rotate3d(var(--full-rotation));animation:svelte-io58ff-rotate var(--transition-duration) var(--transition-delay) var(--transition-iteration-count) linear}.rounded.svelte-io58ff .confetti.svelte-io58ff::before{border-radius:50%}.cone.svelte-io58ff .confetti.svelte-io58ff{--translate-x:calc(200px * var(--translate-y-multiplier) * var(--translate-x-multiplier))}.no-gravity.svelte-io58ff .confetti.svelte-io58ff{animation-name:svelte-io58ff-no-gravity-translate;animation-timing-function:ease-out}@media(prefers-reduced-motion){.confetti.svelte-io58ff.svelte-io58ff,.confetti.svelte-io58ff.svelte-io58ff::before{animation:none}}")}function Se(e,t,F){const n=e.slice();return n[18]=t[F],n}function Ee(e){let t,F={length:e[6]},n=[];for(let t=0;t<F.length;t+=1)n[t]=Oe(Se(e,F,t));return{c(){t=q("div");for(let e=0;e<n.length;e+=1)n[e].c();O(t,"class","confetti-holder svelte-io58ff"),P(t,"rounded",e[9]),P(t,"cone",e[10]),P(t,"no-gravity",e[11])},m(e,F){z(e,t,F);for(let e=0;e<n.length;e+=1)n[e].m(t,null)},p(e,o){if(20991&o){let r;for(F={length:e[6]},r=0;r<F.length;r+=1){const i=Se(e,F,r);n[r]?n[r].p(i,o):(n[r]=Oe(i),n[r].c(),n[r].m(t,null))}for(;r<n.length;r+=1)n[r].d(1);n.length=F.length}512&o&&P(t,"rounded",e[9]),1024&o&&P(t,"cone",e[10]),2048&o&&P(t,"no-gravity",e[11])},d(e){e&&k(t),function(e,t){for(let F=0;F<e.length;F+=1)e[F]&&e[F].d(t)}(n,e)}}}function Oe(e){let t;return{c(){t=q("div"),O(t,"class","confetti svelte-io58ff"),A(t,"--fall-distance",e[8]),A(t,"--size",e[0]+"px"),A(t,"--color",e[14]()),A(t,"--skew",Ae(-45,45)+"deg,"+Ae(-45,45)+"deg"),A(t,"--rotation-xyz",Ae(-10,10)+", "+Ae(-10,10)+", "+Ae(-10,10)),A(t,"--rotation-deg",Ae(0,360)+"deg"),A(t,"--translate-y-multiplier",Ae(e[2][0],e[2][1])),A(t,"--translate-x-multiplier",Ae(e[1][0],e[1][1])),A(t,"--scale",.1*Ae(2,10)),A(t,"--transition-duration",e[4]?`calc(${e[3]}ms * var(--scale))`:e[3]+"ms"),A(t,"--transition-delay",Ae(e[5][0],e[5][1])+"ms"),A(t,"--transition-iteration-count",e[4]?"infinite":e[7]),A(t,"--x-spread",1-e[12])},m(e,F){z(e,t,F)},p(e,F){256&F&&A(t,"--fall-distance",e[8]),1&F&&A(t,"--size",e[0]+"px"),4&F&&A(t,"--translate-y-multiplier",Ae(e[2][0],e[2][1])),2&F&&A(t,"--translate-x-multiplier",Ae(e[1][0],e[1][1])),24&F&&A(t,"--transition-duration",e[4]?`calc(${e[3]}ms * var(--scale))`:e[3]+"ms"),32&F&&A(t,"--transition-delay",Ae(e[5][0],e[5][1])+"ms"),144&F&&A(t,"--transition-iteration-count",e[4]?"infinite":e[7]),4096&F&&A(t,"--x-spread",1-e[12])},d(e){e&&k(t)}}}function Te(e){let t,F=!e[13]&&Ee(e);return{c(){F&&F.c(),t=C("")},m(e,n){F&&F.m(e,n),z(e,t,n)},p(e,[n]){e[13]?F&&(F.d(1),F=null):F?F.p(e,n):(F=Ee(e),F.c(),F.m(t.parentNode,t))},i:n,o:n,d(e){F&&F.d(e),e&&k(t)}}}function Ae(e,t){return Math.random()*(t-e)+e}function je(e,t,F){let{size:n=10}=t,{x:o=[-.5,.5]}=t,{y:r=[.25,1]}=t,{duration:i=2e3}=t,{infinite:a=!1}=t,{delay:l=[0,50]}=t,{colorRange:s=[0,360]}=t,{colorArray:c=[]}=t,{amount:u=50}=t,{iterationCount:f=1}=t,{fallDistance:d="100px"}=t,{rounded:m=!1}=t,{cone:p=!1}=t,{noGravity:v=!1}=t,{xSpread:H=.15}=t,{destroyOnComplete:y=!0}=t,g=!1;return L(()=>{y&&!a&&"infinite"!=f&&setTimeout(()=>F(13,g=!0),(i+l[1])*f)}),e.$$set=e=>{"size"in e&&F(0,n=e.size),"x"in e&&F(1,o=e.x),"y"in e&&F(2,r=e.y),"duration"in e&&F(3,i=e.duration),"infinite"in e&&F(4,a=e.infinite),"delay"in e&&F(5,l=e.delay),"colorRange"in e&&F(15,s=e.colorRange),"colorArray"in e&&F(16,c=e.colorArray),"amount"in e&&F(6,u=e.amount),"iterationCount"in e&&F(7,f=e.iterationCount),"fallDistance"in e&&F(8,d=e.fallDistance),"rounded"in e&&F(9,m=e.rounded),"cone"in e&&F(10,p=e.cone),"noGravity"in e&&F(11,v=e.noGravity),"xSpread"in e&&F(12,H=e.xSpread),"destroyOnComplete"in e&&F(17,y=e.destroyOnComplete)},[n,o,r,i,a,l,u,f,d,m,p,v,H,g,function(){return c.length?c[Math.round(Math.random()*(c.length-1))]:`hsl(${Math.round(Ae(s[0],s[1]))}, 75%, 50%`},s,c,y]}var De=class extends ue{constructor(e){super(),ce(this,e,je,Te,c,{size:0,x:1,y:2,duration:3,infinite:4,delay:5,colorRange:15,colorArray:16,amount:6,iterationCount:7,fallDistance:8,rounded:9,cone:10,noGravity:11,xSpread:12,destroyOnComplete:17},Ce)}};const Pe={small:["SFFFFFFFFF","FFFFFFFFFF","HFFFFFFFFF","FFHFFFFFFF","HFFFFHFFFF","FFHFFFHFFF","HFFFFHFFFF","FFHFFFFFFF","HFFFFFFFFF","FFFGFFFFFF"],"16x16":["HHFFFFFFFFFFFFHH","HFFFFFFFFFFFFFFH","FFFFFFFFFFFFFFFF","FFFHHHFFFFHHHFFF","FFFHHHFFFFHHHFFF","FFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFF","FFFFFFFFGFFFFFFF","FFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFF","FFFHHHFFFFHHHFFF","FFFHHHHHHHHHHFFF","FFFFHHHHHHHHFFFF","FFFFFFFFFFFFFFFF","HFFFFFFFSFFFFFFH","HHFFFFFFFFFFFFHH"],"32x32":["HHHHHHFFFFFFFFFFFFFFFFFHHHHHHHHH","HHFFFFFFFFFFFFFFFFFFFFFFHHHHHHHH","FFFFSFFFHHFFFFFFFFFFFFFFFFFFFFFH","FFFFFFFFFHFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HHFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HHHHHFFFFFFFFFHHHHHHHHFFFFFFFFFF","HHHHHHHHHHHHHHHHHHHHHHHFFFFFFFFF","HHHHHHHHHHHHHHHHHHHHHHFFFFFFFFFF","HHFFHHHHHHHHHHHHFFFFFFFFFFFFFFFF","HFFFFFFFFFFFFHHHHHFFFFFFFFFFFFFF","HFFFFFFFFFFFFFFHHFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHHHFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHHHFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFHHHHFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFHHHHHF","FFFFFFFFFFFFFFFFFFFFFFFFFFFHHHHH","FFFFFFFFFFFFFFFFFFFFFFFFFFHHHHHH","FFFFFFFFFFFFFFFFFFFFFFFFFHHHHFFH","FFFFFFFFFFFFFFFFFFFFFFFFFFHHFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFGFFFFFFFHFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFHFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFHFFHFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","HFFFFFFFFFFFFFFFFFFFFFFHFFFFFFFF","HHHHHHHFFFFFFFFFFFFFFFFFFFFFFFFF","HHHHHHHHHHHHFFFFFFFFFFFFFFFFFFFF"]},Re={H:"#1976d2",S:"#ef9a9a",F:"#e1f5fe",G:"#81c784",T:"#ffe0b2"};const{window:Me}=ie;function Ie(e){w(e,"svelte-y0zxql","canvas.svelte-y0zxql.svelte-y0zxql{padding:1em\n  }.game.svelte-y0zxql.svelte-y0zxql{display:flex;flex-direction:column;align-items:center;justify-content:center;padding-bottom:1.5em}.controls.svelte-y0zxql.svelte-y0zxql{display:flex;flex-direction:column;align-items:center}.status.svelte-y0zxql.svelte-y0zxql{height:1em;width:16em;text-align:center;transition:color 1s;padding-top:1em}.map.svelte-y0zxql.svelte-y0zxql{display:flex;flex-direction:column;align-items:center}.menu.svelte-y0zxql.svelte-y0zxql{display:flex;flex-direction:row;align-items:center}.key.svelte-y0zxql.svelte-y0zxql{background-color:#eee;border-radius:4px;font-size:1em;padding:0.5em 0.5em;border-top:5px solid rgba(255, 255, 255, 0.5);border-left:5px solid rgba(255, 255, 255, 0.5);border-right:5px solid rgba(0, 0, 0, 0.2);border-bottom:5px solid rgba(0, 0, 0, 0.2);color:#555;text-align:center;width:4em;height:4em;cursor:pointer}@media(min-width: 768px){.game.svelte-y0zxql.svelte-y0zxql{flex-direction:row}.controls.svelte-y0zxql.svelte-y0zxql{flex-direction:column}.menu.svelte-y0zxql.svelte-y0zxql{flex-direction:column}.key.svelte-y0zxql.svelte-y0zxql{width:3em;height:3em}}.menu.svelte-y0zxql select.svelte-y0zxql{margin:0.5em}.keyboard.svelte-y0zxql.svelte-y0zxql{display:grid;grid-template-columns:auto auto auto;grid-gap:0.5em;padding:1em}.key.svelte-y0zxql.svelte-y0zxql:active{background-color:#ddd}")}function Le(e){let t,F;return t=new De({props:{cone:!0,delay:[0,200],amount:"50",x:[-.7,.7],y:[.5,1.5]}}),{c(){var e;(e=t.$$.fragment)&&e.c()},m(e,n){le(t,e,n),F=!0},i(e){F||(oe(t.$$.fragment,e),F=!0)},o(e){re(t.$$.fragment,e),F=!1},d(e){se(t,e)}}}function Be(e){let t;return{c(){t=q("p"),t.textContent="Press the arrow keys to move...",O(t,"class","status svelte-y0zxql")},m(e,F){z(e,t,F)},p:n,d(e){e&&k(t)}}}function Ge(e){let t,F;return{c(){t=q("p"),F=C(e[10]),O(t,"class","status svelte-y0zxql"),A(t,"transition","color "+(e[10]?2:0)+"s"),A(t,"transition-timing-function","ease-in"),A(t,"color",e[10]?"white":"black")},m(e,n){z(e,t,n),b(t,F)},p(e,n){1024&n[0]&&T(F,e[10]),1024&n[0]&&A(t,"transition","color "+(e[10]?2:0)+"s"),1024&n[0]&&A(t,"color",e[10]?"white":"black")},d(e){e&&k(t)}}}function Ye(e){let t,F,n,o,r,i,a,s,c,u,d,m,p,v,H,y,g,h,x,w,_,$,C,T,D,P,R,M,I,L,B,G,Y,N,X,J,K,U,V,W,Z,ee,te,ie,ae=e[11]&&Le();function le(e,t){return e[9]?Ge:Be}let se=le(e),ce=se(e);return{c(){t=q("div"),F=q("div"),n=q("canvas"),i=S(),a=q("img"),c=S(),ae&&ae.c(),u=S(),d=q("div"),ce.c(),m=S(),p=q("div"),v=q("select"),H=q("option"),H.textContent="Frozen Lake",y=q("option"),y.textContent="Frozen Smiley",g=q("option"),g.textContent="Large Lake",h=S(),x=q("select"),w=q("option"),w.textContent="No Teacher",_=q("option"),_.textContent="Distance 1",$=q("option"),$.textContent="Distance 2",C=S(),T=q("select"),D=q("option"),D.textContent="Soft Reset",P=q("option"),P.textContent="Back 4",R=q("option"),R.textContent="Hard Reset",I=S(),L=q("div"),B=q("div"),G=S(),Y=q("button"),Y.textContent="↑",N=S(),X=q("div"),J=S(),K=q("button"),K.textContent="←",U=S(),V=q("button"),V.textContent="↓",W=S(),Z=q("button"),Z.textContent="→",O(n,"width",o=500*e[12]),O(n,"height",r=500*e[12]),A(n,"width","300px"),A(n,"height","300px"),O(n,"class","svelte-y0zxql"),O(a,"width","300"),O(a,"alt","TODO"),f(a.src,s="./images/map_legend.svg")||O(a,"src","./images/map_legend.svg"),O(F,"class","map svelte-y0zxql"),H.__value="small",H.value=H.__value,y.__value="16x16",y.value=y.__value,g.__value="32x32",g.value=g.__value,O(v,"name","map"),O(v,"id","map"),O(v,"class","svelte-y0zxql"),void 0===e[1]&&Q(()=>e[18].call(v)),w.__value="0",w.value=w.__value,_.__value="1",_.value=_.__value,$.__value="2",$.value=$.__value,O(x,"name","teacher"),O(x,"id","teacher"),O(x,"class","svelte-y0zxql"),void 0===e[2]&&Q(()=>e[19].call(x)),D.__value="SR",D.value=D.__value,P.__value="B4",P.value=P.__value,R.__value="HR",R.value=R.__value,O(T,"name","reset"),O(T,"id","reset"),T.disabled=M=0==e[2],O(T,"class","svelte-y0zxql"),void 0===e[3]&&Q(()=>e[20].call(T)),O(p,"class","menu svelte-y0zxql"),O(Y,"class","key svelte-y0zxql"),O(K,"class","key svelte-y0zxql"),O(V,"class","key svelte-y0zxql"),O(Z,"class","key svelte-y0zxql"),O(L,"class","keyboard svelte-y0zxql"),O(d,"class","controls svelte-y0zxql"),O(t,"class","game svelte-y0zxql")},m(o,r){z(o,t,r),b(t,F),b(F,n),e[16](n),b(F,i),b(F,a),b(F,c),ae&&ae.m(F,null),b(t,u),b(t,d),ce.m(d,null),b(d,m),b(d,p),b(p,v),b(v,H),b(v,y),b(v,g),j(v,e[1]),b(p,h),b(p,x),b(x,w),b(x,_),b(x,$),j(x,e[2]),b(p,C),b(p,T),b(T,D),b(T,P),b(T,R),j(T,e[3]),b(d,I),b(d,L),b(L,B),b(L,G),b(L,Y),b(L,N),b(L,X),b(L,J),b(L,K),b(L,U),b(L,V),b(L,W),b(L,Z),ee=!0,te||(ie=[E(Me,"keydown",e[14]),E(n,"click",e[17]),E(v,"change",e[18]),E(v,"change",e[13]),E(x,"change",e[19]),E(T,"change",e[20]),E(Y,"click",e[21]),E(K,"click",e[22]),E(V,"click",e[23]),E(Z,"click",e[24])],te=!0)},p(e,t){(!ee||4096&t[0]&&o!==(o=500*e[12]))&&O(n,"width",o),(!ee||4096&t[0]&&r!==(r=500*e[12]))&&O(n,"height",r),e[11]?ae?2048&t[0]&&oe(ae,1):(ae=Le(),ae.c(),oe(ae,1),ae.m(F,null)):ae&&(Fe(),re(ae,1,1,()=>{ae=null}),ne()),se===(se=le(e))&&ce?ce.p(e,t):(ce.d(1),ce=se(e),ce&&(ce.c(),ce.m(d,m))),2&t[0]&&j(v,e[1]),4&t[0]&&j(x,e[2]),(!ee||4&t[0]&&M!==(M=0==e[2]))&&(T.disabled=M),8&t[0]&&j(T,e[3])},i(e){ee||(oe(ae),ee=!0)},o(e){re(ae),ee=!1},d(F){F&&k(t),e[16](null),ae&&ae.d(),ce.d(),te=!1,l(ie)}}}function Ne(e,t,F){let i,a,l,s,c,u=n;e.$$.on_destroy.push(()=>u());var f,d,p,H=!1,y=!1,g=!1,x=!1,b=!0,w=[],_=!1,$="",z=null,k=!1;const q=new Image;q.src="./images/robot.png";const C=new Image;C.src="./images/robot-flipped.png";var S=!1,E=q;function O(e){F(10,$=""),clearTimeout(z),setTimeout(()=>{F(10,$=e)},1),z=setTimeout(()=>{F(10,$="")},2e3)}L(()=>{const e=a.getContext("2d");var t,n,$,z,T;function A(e){let t=e.length,F=e[0].length,n=new Array(t).fill(!1).map(()=>new Array(F).fill(!1));for(let r=0;r<t;r++)for(let t=0;t<F;t++){var o=!1;try{o|=e[r][t+1]}catch(e){}try{o|=e[r+1][t]}catch(e){}try{o|=e[r][t-1]}catch(e){}try{o|=e[r-1][t]}catch(e){}n[r][t]=o}return n}function j(){n=Pe[l],t=a.height/n.length,T=function(e,t){if(0==t)return e;var F=new Array;for(let e=0;e<n.length;e++)F.push(n[e].split(""));let o=F.map(e=>e.map(e=>"H"==e)),r=F.map(e=>e.map(e=>"F"==e));var i,a=Array.from(o);for(let e=0;e<t;e++)i=A(a),a=i.map((e,t)=>e.map((e,F)=>e||a[t][F]));var l=Array.from(F);for(let e=0;e<F.length;e++)for(let t=0;t<F[0].length;t++)i[e][t]&&r[e][t]&&(l[e][t]="T");let s=new Array;for(let t=0;t<e.length;t++)s.push(l[t].join(""));return s}(n,s);for(let F=0;F<n.length;F++)for(let o=0;o<n[0].length;o++){let n=T[F][o];"S"==n&&($=[o,F]);let r=o*t,i=F*t;e.beginPath(),e.rect(r,i,t+1,t+1),e.fillStyle=Re[n],e.fill(),e.closePath()}}function D(e){f.set(e),d=e,w.push(d)}function P(){w=[],D($)}F(12,p=window.devicePixelRatio),e.scale(p,p),j(),function l(){(y||H||g||x)&&F(9,_=!0),e.clearRect(0,0,a.width,a.height),j(),b&&(F(8,f=function(e,t={}){const F=$e(e);let n,i=e;function a(a,l){if(null==e)return F.set(e=a),Promise.resolve();i=a;let s=n,c=!1,{delay:u=0,duration:f=400,easing:d=o,interpolate:m=qe}=r(r({},t),l);if(0===f)return s&&(s.abort(),s=null),F.set(e=i),Promise.resolve();const p=v()+u;let H;return n=h(t=>{if(t<p)return!0;c||(H=m(e,a),"function"==typeof f&&(f=f(e,a)),c=!0),s&&(s.abort(),s=null);const n=t-p;return n>f?(F.set(e=a),!1):(F.set(e=H(d(n/f))),!0)}),n.promise}return{set:a,update:(t,F)=>a(t(i,e),F),subscribe:F.subscribe}}($,{duration:150,easing:ze})),u(),u=m(f,e=>F(33,i=e)),P()),async function(){E=S?C:q,e.drawImage(E,i[0]*t,i[1]*t,t,t)}();const s=Math.random();y||H?s<.1?(F(5,y=!1),F(4,H=!1),F(6,g=!0)):s<.2&&(F(5,y=!1),F(4,H=!1),F(7,x=!0)):(g||x)&&(s<.1?(F(6,g=!1),F(7,x=!1),F(5,y=!0)):s<.2&&(F(6,g=!1),F(7,x=!1),F(4,H=!0))),s<.2&&(g||x||y||H)&&O("You just slipped."),y&&(S=!0),H&&(S=!1),z=Array.from(d);let[p,A]=Array.from(z);if(H?p<n[0].length-1&&(p+=1):y?p>0&&(p-=1):g?A>0&&(A-=1):x&&A<n.length-1&&(A+=1),(H||y||x||g)&&D([p,A]),"G"==n[A][p])F(11,k=!0),setTimeout(()=>{F(11,k=!1)},3e3),O("You won!"),P();else if("H"==n[A][p])O("You failed."),P();else if("T"==T[A][p]){if("HR"==c)P();else if("B4"==c){for(let e=0;e<4&&w.length>1;e++)w.pop();D(w[w.length-1])}else"SR"==c&&D(z);O("The teacher set you back.")}b=!1,F(4,H=!1),F(5,y=!1),F(6,g=!1),F(7,x=!1),requestAnimationFrame(l)}()});return[a,l,s,c,H,y,g,x,f,_,$,k,p,function(){b=!0},function(e){39==e.keyCode||"d"==e.key?(F(4,H=!0),e.preventDefault()):37==e.keyCode||"a"==e.key?(F(5,y=!0),e.preventDefault()):38==e.keyCode||"w"==e.key?(F(6,g=!0),e.preventDefault()):40!=e.keyCode&&"s"!=e.key||(F(7,x=!0),e.preventDefault())},O,function(e){G[e?"unshift":"push"](()=>{a=e,F(0,a)})},()=>O("Press the arrow keys to move..."),function(){l=D(this),F(1,l)},function(){s=D(this),F(2,s)},function(){c=D(this),F(3,c)},()=>F(6,g=!0),()=>F(5,y=!0),()=>F(7,x=!0),()=>F(4,H=!0)]}var Xe=class extends ue{constructor(e){super(),ce(this,e,Ne,Ye,c,{},Ie,[-1,-1])}},Je=document.getElementById("trajectories-visualization");Je.addEventListener("ready",(function(){var e=Je.querySelector("#trajectories-visualization-target");new pe({target:e})}));var Ke=document.getElementById("back-visualization");Ke.addEventListener("ready",(function(){var e=Ke.querySelector("#back-visualization-target");new ge({target:e})}));var Qe=document.getElementById("incremental-visualization");Qe.addEventListener("ready",(function(){var e=Qe.querySelector("#incremental-visualization-target");new we({target:e})}));var Ue=document.getElementById("grid-visualization");Ue.addEventListener("ready",(function(){var e=Ue.querySelector("#grid-visualization-target");new Xe({target:e})}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,